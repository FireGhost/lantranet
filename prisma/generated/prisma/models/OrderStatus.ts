
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `OrderStatus` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model OrderStatus
 * 
 */
export type OrderStatusModel = runtime.Types.Result.DefaultSelection<Prisma.$OrderStatusPayload>

export type AggregateOrderStatus = {
  _count: OrderStatusCountAggregateOutputType | null
  _avg: OrderStatusAvgAggregateOutputType | null
  _sum: OrderStatusSumAggregateOutputType | null
  _min: OrderStatusMinAggregateOutputType | null
  _max: OrderStatusMaxAggregateOutputType | null
}

export type OrderStatusAvgAggregateOutputType = {
  id: number | null
  weight: number | null
}

export type OrderStatusSumAggregateOutputType = {
  id: number | null
  weight: number | null
}

export type OrderStatusMinAggregateOutputType = {
  id: number | null
  name: string | null
  color: string | null
  weight: number | null
}

export type OrderStatusMaxAggregateOutputType = {
  id: number | null
  name: string | null
  color: string | null
  weight: number | null
}

export type OrderStatusCountAggregateOutputType = {
  id: number
  name: number
  color: number
  weight: number
  _all: number
}


export type OrderStatusAvgAggregateInputType = {
  id?: true
  weight?: true
}

export type OrderStatusSumAggregateInputType = {
  id?: true
  weight?: true
}

export type OrderStatusMinAggregateInputType = {
  id?: true
  name?: true
  color?: true
  weight?: true
}

export type OrderStatusMaxAggregateInputType = {
  id?: true
  name?: true
  color?: true
  weight?: true
}

export type OrderStatusCountAggregateInputType = {
  id?: true
  name?: true
  color?: true
  weight?: true
  _all?: true
}

export type OrderStatusAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OrderStatus to aggregate.
   */
  where?: Prisma.OrderStatusWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrderStatuses to fetch.
   */
  orderBy?: Prisma.OrderStatusOrderByWithRelationInput | Prisma.OrderStatusOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OrderStatusWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrderStatuses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrderStatuses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned OrderStatuses
  **/
  _count?: true | OrderStatusCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: OrderStatusAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: OrderStatusSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OrderStatusMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OrderStatusMaxAggregateInputType
}

export type GetOrderStatusAggregateType<T extends OrderStatusAggregateArgs> = {
      [P in keyof T & keyof AggregateOrderStatus]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOrderStatus[P]>
    : Prisma.GetScalarType<T[P], AggregateOrderStatus[P]>
}




export type OrderStatusGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrderStatusWhereInput
  orderBy?: Prisma.OrderStatusOrderByWithAggregationInput | Prisma.OrderStatusOrderByWithAggregationInput[]
  by: Prisma.OrderStatusScalarFieldEnum[] | Prisma.OrderStatusScalarFieldEnum
  having?: Prisma.OrderStatusScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OrderStatusCountAggregateInputType | true
  _avg?: OrderStatusAvgAggregateInputType
  _sum?: OrderStatusSumAggregateInputType
  _min?: OrderStatusMinAggregateInputType
  _max?: OrderStatusMaxAggregateInputType
}

export type OrderStatusGroupByOutputType = {
  id: number
  name: string
  color: string
  weight: number
  _count: OrderStatusCountAggregateOutputType | null
  _avg: OrderStatusAvgAggregateOutputType | null
  _sum: OrderStatusSumAggregateOutputType | null
  _min: OrderStatusMinAggregateOutputType | null
  _max: OrderStatusMaxAggregateOutputType | null
}

type GetOrderStatusGroupByPayload<T extends OrderStatusGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OrderStatusGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OrderStatusGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OrderStatusGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OrderStatusGroupByOutputType[P]>
      }
    >
  >



export type OrderStatusWhereInput = {
  AND?: Prisma.OrderStatusWhereInput | Prisma.OrderStatusWhereInput[]
  OR?: Prisma.OrderStatusWhereInput[]
  NOT?: Prisma.OrderStatusWhereInput | Prisma.OrderStatusWhereInput[]
  id?: Prisma.IntFilter<"OrderStatus"> | number
  name?: Prisma.StringFilter<"OrderStatus"> | string
  color?: Prisma.StringFilter<"OrderStatus"> | string
  weight?: Prisma.IntFilter<"OrderStatus"> | number
  orders?: Prisma.OrderListRelationFilter
}

export type OrderStatusOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  color?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  orders?: Prisma.OrderOrderByRelationAggregateInput
}

export type OrderStatusWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.OrderStatusWhereInput | Prisma.OrderStatusWhereInput[]
  OR?: Prisma.OrderStatusWhereInput[]
  NOT?: Prisma.OrderStatusWhereInput | Prisma.OrderStatusWhereInput[]
  name?: Prisma.StringFilter<"OrderStatus"> | string
  color?: Prisma.StringFilter<"OrderStatus"> | string
  weight?: Prisma.IntFilter<"OrderStatus"> | number
  orders?: Prisma.OrderListRelationFilter
}, "id">

export type OrderStatusOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  color?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  _count?: Prisma.OrderStatusCountOrderByAggregateInput
  _avg?: Prisma.OrderStatusAvgOrderByAggregateInput
  _max?: Prisma.OrderStatusMaxOrderByAggregateInput
  _min?: Prisma.OrderStatusMinOrderByAggregateInput
  _sum?: Prisma.OrderStatusSumOrderByAggregateInput
}

export type OrderStatusScalarWhereWithAggregatesInput = {
  AND?: Prisma.OrderStatusScalarWhereWithAggregatesInput | Prisma.OrderStatusScalarWhereWithAggregatesInput[]
  OR?: Prisma.OrderStatusScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OrderStatusScalarWhereWithAggregatesInput | Prisma.OrderStatusScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"OrderStatus"> | number
  name?: Prisma.StringWithAggregatesFilter<"OrderStatus"> | string
  color?: Prisma.StringWithAggregatesFilter<"OrderStatus"> | string
  weight?: Prisma.IntWithAggregatesFilter<"OrderStatus"> | number
}

export type OrderStatusCreateInput = {
  name: string
  color: string
  weight: number
  orders?: Prisma.OrderCreateNestedManyWithoutStatusInput
}

export type OrderStatusUncheckedCreateInput = {
  id?: number
  name: string
  color: string
  weight: number
  orders?: Prisma.OrderUncheckedCreateNestedManyWithoutStatusInput
}

export type OrderStatusUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  orders?: Prisma.OrderUpdateManyWithoutStatusNestedInput
}

export type OrderStatusUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  orders?: Prisma.OrderUncheckedUpdateManyWithoutStatusNestedInput
}

export type OrderStatusCreateManyInput = {
  id?: number
  name: string
  color: string
  weight: number
}

export type OrderStatusUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrderStatusUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrderStatusNullableScalarRelationFilter = {
  is?: Prisma.OrderStatusWhereInput | null
  isNot?: Prisma.OrderStatusWhereInput | null
}

export type OrderStatusCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  color?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type OrderStatusAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type OrderStatusMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  color?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type OrderStatusMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  color?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type OrderStatusSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type OrderStatusCreateNestedOneWithoutOrdersInput = {
  create?: Prisma.XOR<Prisma.OrderStatusCreateWithoutOrdersInput, Prisma.OrderStatusUncheckedCreateWithoutOrdersInput>
  connectOrCreate?: Prisma.OrderStatusCreateOrConnectWithoutOrdersInput
  connect?: Prisma.OrderStatusWhereUniqueInput
}

export type OrderStatusUpdateOneWithoutOrdersNestedInput = {
  create?: Prisma.XOR<Prisma.OrderStatusCreateWithoutOrdersInput, Prisma.OrderStatusUncheckedCreateWithoutOrdersInput>
  connectOrCreate?: Prisma.OrderStatusCreateOrConnectWithoutOrdersInput
  upsert?: Prisma.OrderStatusUpsertWithoutOrdersInput
  disconnect?: Prisma.OrderStatusWhereInput | boolean
  delete?: Prisma.OrderStatusWhereInput | boolean
  connect?: Prisma.OrderStatusWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.OrderStatusUpdateToOneWithWhereWithoutOrdersInput, Prisma.OrderStatusUpdateWithoutOrdersInput>, Prisma.OrderStatusUncheckedUpdateWithoutOrdersInput>
}

export type OrderStatusCreateWithoutOrdersInput = {
  name: string
  color: string
  weight: number
}

export type OrderStatusUncheckedCreateWithoutOrdersInput = {
  id?: number
  name: string
  color: string
  weight: number
}

export type OrderStatusCreateOrConnectWithoutOrdersInput = {
  where: Prisma.OrderStatusWhereUniqueInput
  create: Prisma.XOR<Prisma.OrderStatusCreateWithoutOrdersInput, Prisma.OrderStatusUncheckedCreateWithoutOrdersInput>
}

export type OrderStatusUpsertWithoutOrdersInput = {
  update: Prisma.XOR<Prisma.OrderStatusUpdateWithoutOrdersInput, Prisma.OrderStatusUncheckedUpdateWithoutOrdersInput>
  create: Prisma.XOR<Prisma.OrderStatusCreateWithoutOrdersInput, Prisma.OrderStatusUncheckedCreateWithoutOrdersInput>
  where?: Prisma.OrderStatusWhereInput
}

export type OrderStatusUpdateToOneWithWhereWithoutOrdersInput = {
  where?: Prisma.OrderStatusWhereInput
  data: Prisma.XOR<Prisma.OrderStatusUpdateWithoutOrdersInput, Prisma.OrderStatusUncheckedUpdateWithoutOrdersInput>
}

export type OrderStatusUpdateWithoutOrdersInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrderStatusUncheckedUpdateWithoutOrdersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
}


/**
 * Count Type OrderStatusCountOutputType
 */

export type OrderStatusCountOutputType = {
  orders: number
}

export type OrderStatusCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  orders?: boolean | OrderStatusCountOutputTypeCountOrdersArgs
}

/**
 * OrderStatusCountOutputType without action
 */
export type OrderStatusCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatusCountOutputType
   */
  select?: Prisma.OrderStatusCountOutputTypeSelect<ExtArgs> | null
}

/**
 * OrderStatusCountOutputType without action
 */
export type OrderStatusCountOutputTypeCountOrdersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrderWhereInput
}


export type OrderStatusSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  color?: boolean
  weight?: boolean
  orders?: boolean | Prisma.OrderStatus$ordersArgs<ExtArgs>
  _count?: boolean | Prisma.OrderStatusCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["orderStatus"]>

export type OrderStatusSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  color?: boolean
  weight?: boolean
}, ExtArgs["result"]["orderStatus"]>

export type OrderStatusSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  color?: boolean
  weight?: boolean
}, ExtArgs["result"]["orderStatus"]>

export type OrderStatusSelectScalar = {
  id?: boolean
  name?: boolean
  color?: boolean
  weight?: boolean
}

export type OrderStatusOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "color" | "weight", ExtArgs["result"]["orderStatus"]>
export type OrderStatusInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  orders?: boolean | Prisma.OrderStatus$ordersArgs<ExtArgs>
  _count?: boolean | Prisma.OrderStatusCountOutputTypeDefaultArgs<ExtArgs>
}
export type OrderStatusIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type OrderStatusIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $OrderStatusPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "OrderStatus"
  objects: {
    orders: Prisma.$OrderPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    color: string
    weight: number
  }, ExtArgs["result"]["orderStatus"]>
  composites: {}
}

export type OrderStatusGetPayload<S extends boolean | null | undefined | OrderStatusDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OrderStatusPayload, S>

export type OrderStatusCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OrderStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OrderStatusCountAggregateInputType | true
  }

export interface OrderStatusDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderStatus'], meta: { name: 'OrderStatus' } }
  /**
   * Find zero or one OrderStatus that matches the filter.
   * @param {OrderStatusFindUniqueArgs} args - Arguments to find a OrderStatus
   * @example
   * // Get one OrderStatus
   * const orderStatus = await prisma.orderStatus.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OrderStatusFindUniqueArgs>(args: Prisma.SelectSubset<T, OrderStatusFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OrderStatusClient<runtime.Types.Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one OrderStatus that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OrderStatusFindUniqueOrThrowArgs} args - Arguments to find a OrderStatus
   * @example
   * // Get one OrderStatus
   * const orderStatus = await prisma.orderStatus.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OrderStatusFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OrderStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrderStatusClient<runtime.Types.Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OrderStatus that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderStatusFindFirstArgs} args - Arguments to find a OrderStatus
   * @example
   * // Get one OrderStatus
   * const orderStatus = await prisma.orderStatus.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OrderStatusFindFirstArgs>(args?: Prisma.SelectSubset<T, OrderStatusFindFirstArgs<ExtArgs>>): Prisma.Prisma__OrderStatusClient<runtime.Types.Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OrderStatus that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderStatusFindFirstOrThrowArgs} args - Arguments to find a OrderStatus
   * @example
   * // Get one OrderStatus
   * const orderStatus = await prisma.orderStatus.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OrderStatusFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OrderStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrderStatusClient<runtime.Types.Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more OrderStatuses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderStatusFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all OrderStatuses
   * const orderStatuses = await prisma.orderStatus.findMany()
   * 
   * // Get first 10 OrderStatuses
   * const orderStatuses = await prisma.orderStatus.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const orderStatusWithIdOnly = await prisma.orderStatus.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OrderStatusFindManyArgs>(args?: Prisma.SelectSubset<T, OrderStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a OrderStatus.
   * @param {OrderStatusCreateArgs} args - Arguments to create a OrderStatus.
   * @example
   * // Create one OrderStatus
   * const OrderStatus = await prisma.orderStatus.create({
   *   data: {
   *     // ... data to create a OrderStatus
   *   }
   * })
   * 
   */
  create<T extends OrderStatusCreateArgs>(args: Prisma.SelectSubset<T, OrderStatusCreateArgs<ExtArgs>>): Prisma.Prisma__OrderStatusClient<runtime.Types.Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many OrderStatuses.
   * @param {OrderStatusCreateManyArgs} args - Arguments to create many OrderStatuses.
   * @example
   * // Create many OrderStatuses
   * const orderStatus = await prisma.orderStatus.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OrderStatusCreateManyArgs>(args?: Prisma.SelectSubset<T, OrderStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many OrderStatuses and returns the data saved in the database.
   * @param {OrderStatusCreateManyAndReturnArgs} args - Arguments to create many OrderStatuses.
   * @example
   * // Create many OrderStatuses
   * const orderStatus = await prisma.orderStatus.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many OrderStatuses and only return the `id`
   * const orderStatusWithIdOnly = await prisma.orderStatus.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OrderStatusCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OrderStatusCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a OrderStatus.
   * @param {OrderStatusDeleteArgs} args - Arguments to delete one OrderStatus.
   * @example
   * // Delete one OrderStatus
   * const OrderStatus = await prisma.orderStatus.delete({
   *   where: {
   *     // ... filter to delete one OrderStatus
   *   }
   * })
   * 
   */
  delete<T extends OrderStatusDeleteArgs>(args: Prisma.SelectSubset<T, OrderStatusDeleteArgs<ExtArgs>>): Prisma.Prisma__OrderStatusClient<runtime.Types.Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one OrderStatus.
   * @param {OrderStatusUpdateArgs} args - Arguments to update one OrderStatus.
   * @example
   * // Update one OrderStatus
   * const orderStatus = await prisma.orderStatus.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OrderStatusUpdateArgs>(args: Prisma.SelectSubset<T, OrderStatusUpdateArgs<ExtArgs>>): Prisma.Prisma__OrderStatusClient<runtime.Types.Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more OrderStatuses.
   * @param {OrderStatusDeleteManyArgs} args - Arguments to filter OrderStatuses to delete.
   * @example
   * // Delete a few OrderStatuses
   * const { count } = await prisma.orderStatus.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OrderStatusDeleteManyArgs>(args?: Prisma.SelectSubset<T, OrderStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OrderStatuses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderStatusUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many OrderStatuses
   * const orderStatus = await prisma.orderStatus.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OrderStatusUpdateManyArgs>(args: Prisma.SelectSubset<T, OrderStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OrderStatuses and returns the data updated in the database.
   * @param {OrderStatusUpdateManyAndReturnArgs} args - Arguments to update many OrderStatuses.
   * @example
   * // Update many OrderStatuses
   * const orderStatus = await prisma.orderStatus.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more OrderStatuses and only return the `id`
   * const orderStatusWithIdOnly = await prisma.orderStatus.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OrderStatusUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OrderStatusUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one OrderStatus.
   * @param {OrderStatusUpsertArgs} args - Arguments to update or create a OrderStatus.
   * @example
   * // Update or create a OrderStatus
   * const orderStatus = await prisma.orderStatus.upsert({
   *   create: {
   *     // ... data to create a OrderStatus
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the OrderStatus we want to update
   *   }
   * })
   */
  upsert<T extends OrderStatusUpsertArgs>(args: Prisma.SelectSubset<T, OrderStatusUpsertArgs<ExtArgs>>): Prisma.Prisma__OrderStatusClient<runtime.Types.Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of OrderStatuses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderStatusCountArgs} args - Arguments to filter OrderStatuses to count.
   * @example
   * // Count the number of OrderStatuses
   * const count = await prisma.orderStatus.count({
   *   where: {
   *     // ... the filter for the OrderStatuses we want to count
   *   }
   * })
  **/
  count<T extends OrderStatusCountArgs>(
    args?: Prisma.Subset<T, OrderStatusCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OrderStatusCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a OrderStatus.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OrderStatusAggregateArgs>(args: Prisma.Subset<T, OrderStatusAggregateArgs>): Prisma.PrismaPromise<GetOrderStatusAggregateType<T>>

  /**
   * Group by OrderStatus.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderStatusGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OrderStatusGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OrderStatusGroupByArgs['orderBy'] }
      : { orderBy?: OrderStatusGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OrderStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the OrderStatus model
 */
readonly fields: OrderStatusFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for OrderStatus.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OrderStatusClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  orders<T extends Prisma.OrderStatus$ordersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrderStatus$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the OrderStatus model
 */
export interface OrderStatusFieldRefs {
  readonly id: Prisma.FieldRef<"OrderStatus", 'Int'>
  readonly name: Prisma.FieldRef<"OrderStatus", 'String'>
  readonly color: Prisma.FieldRef<"OrderStatus", 'String'>
  readonly weight: Prisma.FieldRef<"OrderStatus", 'Int'>
}
    

// Custom InputTypes
/**
 * OrderStatus findUnique
 */
export type OrderStatusFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatus
   */
  select?: Prisma.OrderStatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatus
   */
  omit?: Prisma.OrderStatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusInclude<ExtArgs> | null
  /**
   * Filter, which OrderStatus to fetch.
   */
  where: Prisma.OrderStatusWhereUniqueInput
}

/**
 * OrderStatus findUniqueOrThrow
 */
export type OrderStatusFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatus
   */
  select?: Prisma.OrderStatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatus
   */
  omit?: Prisma.OrderStatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusInclude<ExtArgs> | null
  /**
   * Filter, which OrderStatus to fetch.
   */
  where: Prisma.OrderStatusWhereUniqueInput
}

/**
 * OrderStatus findFirst
 */
export type OrderStatusFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatus
   */
  select?: Prisma.OrderStatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatus
   */
  omit?: Prisma.OrderStatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusInclude<ExtArgs> | null
  /**
   * Filter, which OrderStatus to fetch.
   */
  where?: Prisma.OrderStatusWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrderStatuses to fetch.
   */
  orderBy?: Prisma.OrderStatusOrderByWithRelationInput | Prisma.OrderStatusOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OrderStatuses.
   */
  cursor?: Prisma.OrderStatusWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrderStatuses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrderStatuses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OrderStatuses.
   */
  distinct?: Prisma.OrderStatusScalarFieldEnum | Prisma.OrderStatusScalarFieldEnum[]
}

/**
 * OrderStatus findFirstOrThrow
 */
export type OrderStatusFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatus
   */
  select?: Prisma.OrderStatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatus
   */
  omit?: Prisma.OrderStatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusInclude<ExtArgs> | null
  /**
   * Filter, which OrderStatus to fetch.
   */
  where?: Prisma.OrderStatusWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrderStatuses to fetch.
   */
  orderBy?: Prisma.OrderStatusOrderByWithRelationInput | Prisma.OrderStatusOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OrderStatuses.
   */
  cursor?: Prisma.OrderStatusWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrderStatuses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrderStatuses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OrderStatuses.
   */
  distinct?: Prisma.OrderStatusScalarFieldEnum | Prisma.OrderStatusScalarFieldEnum[]
}

/**
 * OrderStatus findMany
 */
export type OrderStatusFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatus
   */
  select?: Prisma.OrderStatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatus
   */
  omit?: Prisma.OrderStatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusInclude<ExtArgs> | null
  /**
   * Filter, which OrderStatuses to fetch.
   */
  where?: Prisma.OrderStatusWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrderStatuses to fetch.
   */
  orderBy?: Prisma.OrderStatusOrderByWithRelationInput | Prisma.OrderStatusOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing OrderStatuses.
   */
  cursor?: Prisma.OrderStatusWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrderStatuses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrderStatuses.
   */
  skip?: number
  distinct?: Prisma.OrderStatusScalarFieldEnum | Prisma.OrderStatusScalarFieldEnum[]
}

/**
 * OrderStatus create
 */
export type OrderStatusCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatus
   */
  select?: Prisma.OrderStatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatus
   */
  omit?: Prisma.OrderStatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusInclude<ExtArgs> | null
  /**
   * The data needed to create a OrderStatus.
   */
  data: Prisma.XOR<Prisma.OrderStatusCreateInput, Prisma.OrderStatusUncheckedCreateInput>
}

/**
 * OrderStatus createMany
 */
export type OrderStatusCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many OrderStatuses.
   */
  data: Prisma.OrderStatusCreateManyInput | Prisma.OrderStatusCreateManyInput[]
}

/**
 * OrderStatus createManyAndReturn
 */
export type OrderStatusCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatus
   */
  select?: Prisma.OrderStatusSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatus
   */
  omit?: Prisma.OrderStatusOmit<ExtArgs> | null
  /**
   * The data used to create many OrderStatuses.
   */
  data: Prisma.OrderStatusCreateManyInput | Prisma.OrderStatusCreateManyInput[]
}

/**
 * OrderStatus update
 */
export type OrderStatusUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatus
   */
  select?: Prisma.OrderStatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatus
   */
  omit?: Prisma.OrderStatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusInclude<ExtArgs> | null
  /**
   * The data needed to update a OrderStatus.
   */
  data: Prisma.XOR<Prisma.OrderStatusUpdateInput, Prisma.OrderStatusUncheckedUpdateInput>
  /**
   * Choose, which OrderStatus to update.
   */
  where: Prisma.OrderStatusWhereUniqueInput
}

/**
 * OrderStatus updateMany
 */
export type OrderStatusUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update OrderStatuses.
   */
  data: Prisma.XOR<Prisma.OrderStatusUpdateManyMutationInput, Prisma.OrderStatusUncheckedUpdateManyInput>
  /**
   * Filter which OrderStatuses to update
   */
  where?: Prisma.OrderStatusWhereInput
  /**
   * Limit how many OrderStatuses to update.
   */
  limit?: number
}

/**
 * OrderStatus updateManyAndReturn
 */
export type OrderStatusUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatus
   */
  select?: Prisma.OrderStatusSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatus
   */
  omit?: Prisma.OrderStatusOmit<ExtArgs> | null
  /**
   * The data used to update OrderStatuses.
   */
  data: Prisma.XOR<Prisma.OrderStatusUpdateManyMutationInput, Prisma.OrderStatusUncheckedUpdateManyInput>
  /**
   * Filter which OrderStatuses to update
   */
  where?: Prisma.OrderStatusWhereInput
  /**
   * Limit how many OrderStatuses to update.
   */
  limit?: number
}

/**
 * OrderStatus upsert
 */
export type OrderStatusUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatus
   */
  select?: Prisma.OrderStatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatus
   */
  omit?: Prisma.OrderStatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusInclude<ExtArgs> | null
  /**
   * The filter to search for the OrderStatus to update in case it exists.
   */
  where: Prisma.OrderStatusWhereUniqueInput
  /**
   * In case the OrderStatus found by the `where` argument doesn't exist, create a new OrderStatus with this data.
   */
  create: Prisma.XOR<Prisma.OrderStatusCreateInput, Prisma.OrderStatusUncheckedCreateInput>
  /**
   * In case the OrderStatus was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OrderStatusUpdateInput, Prisma.OrderStatusUncheckedUpdateInput>
}

/**
 * OrderStatus delete
 */
export type OrderStatusDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatus
   */
  select?: Prisma.OrderStatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatus
   */
  omit?: Prisma.OrderStatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusInclude<ExtArgs> | null
  /**
   * Filter which OrderStatus to delete.
   */
  where: Prisma.OrderStatusWhereUniqueInput
}

/**
 * OrderStatus deleteMany
 */
export type OrderStatusDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OrderStatuses to delete
   */
  where?: Prisma.OrderStatusWhereInput
  /**
   * Limit how many OrderStatuses to delete.
   */
  limit?: number
}

/**
 * OrderStatus.orders
 */
export type OrderStatus$ordersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Order
   */
  select?: Prisma.OrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Order
   */
  omit?: Prisma.OrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderInclude<ExtArgs> | null
  where?: Prisma.OrderWhereInput
  orderBy?: Prisma.OrderOrderByWithRelationInput | Prisma.OrderOrderByWithRelationInput[]
  cursor?: Prisma.OrderWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OrderScalarFieldEnum | Prisma.OrderScalarFieldEnum[]
}

/**
 * OrderStatus without action
 */
export type OrderStatusDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatus
   */
  select?: Prisma.OrderStatusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatus
   */
  omit?: Prisma.OrderStatusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusInclude<ExtArgs> | null
}
