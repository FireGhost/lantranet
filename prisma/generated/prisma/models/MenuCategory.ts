/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `MenuCategory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums.js";
import type * as Prisma from "../internal/prismaNamespace.js";

/**
 * Model MenuCategory
 *
 */
export type MenuCategoryModel =
  runtime.Types.Result.DefaultSelection<Prisma.$MenuCategoryPayload>;

export type AggregateMenuCategory = {
  _count: MenuCategoryCountAggregateOutputType | null;
  _avg: MenuCategoryAvgAggregateOutputType | null;
  _sum: MenuCategorySumAggregateOutputType | null;
  _min: MenuCategoryMinAggregateOutputType | null;
  _max: MenuCategoryMaxAggregateOutputType | null;
};

export type MenuCategoryAvgAggregateOutputType = {
  id: number | null;
  weight: number | null;
};

export type MenuCategorySumAggregateOutputType = {
  id: number | null;
  weight: number | null;
};

export type MenuCategoryMinAggregateOutputType = {
  id: number | null;
  name: string | null;
  weight: number | null;
};

export type MenuCategoryMaxAggregateOutputType = {
  id: number | null;
  name: string | null;
  weight: number | null;
};

export type MenuCategoryCountAggregateOutputType = {
  id: number;
  name: number;
  weight: number;
  _all: number;
};

export type MenuCategoryAvgAggregateInputType = {
  id?: true;
  weight?: true;
};

export type MenuCategorySumAggregateInputType = {
  id?: true;
  weight?: true;
};

export type MenuCategoryMinAggregateInputType = {
  id?: true;
  name?: true;
  weight?: true;
};

export type MenuCategoryMaxAggregateInputType = {
  id?: true;
  name?: true;
  weight?: true;
};

export type MenuCategoryCountAggregateInputType = {
  id?: true;
  name?: true;
  weight?: true;
  _all?: true;
};

export type MenuCategoryAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MenuCategory to aggregate.
   */
  where?: Prisma.MenuCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MenuCategories to fetch.
   */
  orderBy?:
    | Prisma.MenuCategoryOrderByWithRelationInput
    | Prisma.MenuCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.MenuCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MenuCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MenuCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned MenuCategories
   **/
  _count?: true | MenuCategoryCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: MenuCategoryAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: MenuCategorySumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: MenuCategoryMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: MenuCategoryMaxAggregateInputType;
};

export type GetMenuCategoryAggregateType<T extends MenuCategoryAggregateArgs> =
  {
    [P in keyof T & keyof AggregateMenuCategory]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : Prisma.GetScalarType<T[P], AggregateMenuCategory[P]>
      : Prisma.GetScalarType<T[P], AggregateMenuCategory[P]>;
  };

export type MenuCategoryGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MenuCategoryWhereInput;
  orderBy?:
    | Prisma.MenuCategoryOrderByWithAggregationInput
    | Prisma.MenuCategoryOrderByWithAggregationInput[];
  by: Prisma.MenuCategoryScalarFieldEnum[] | Prisma.MenuCategoryScalarFieldEnum;
  having?: Prisma.MenuCategoryScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: MenuCategoryCountAggregateInputType | true;
  _avg?: MenuCategoryAvgAggregateInputType;
  _sum?: MenuCategorySumAggregateInputType;
  _min?: MenuCategoryMinAggregateInputType;
  _max?: MenuCategoryMaxAggregateInputType;
};

export type MenuCategoryGroupByOutputType = {
  id: number;
  name: string;
  weight: number;
  _count: MenuCategoryCountAggregateOutputType | null;
  _avg: MenuCategoryAvgAggregateOutputType | null;
  _sum: MenuCategorySumAggregateOutputType | null;
  _min: MenuCategoryMinAggregateOutputType | null;
  _max: MenuCategoryMaxAggregateOutputType | null;
};

type GetMenuCategoryGroupByPayload<T extends MenuCategoryGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<MenuCategoryGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof MenuCategoryGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MenuCategoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MenuCategoryGroupByOutputType[P]>;
      }
    >
  >;

export type MenuCategoryWhereInput = {
  AND?: Prisma.MenuCategoryWhereInput | Prisma.MenuCategoryWhereInput[];
  OR?: Prisma.MenuCategoryWhereInput[];
  NOT?: Prisma.MenuCategoryWhereInput | Prisma.MenuCategoryWhereInput[];
  id?: Prisma.IntFilter<"MenuCategory"> | number;
  name?: Prisma.StringFilter<"MenuCategory"> | string;
  weight?: Prisma.IntFilter<"MenuCategory"> | number;
  menuItems?: Prisma.MenuItemListRelationFilter;
};

export type MenuCategoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  weight?: Prisma.SortOrder;
  menuItems?: Prisma.MenuItemOrderByRelationAggregateInput;
};

export type MenuCategoryWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.MenuCategoryWhereInput | Prisma.MenuCategoryWhereInput[];
    OR?: Prisma.MenuCategoryWhereInput[];
    NOT?: Prisma.MenuCategoryWhereInput | Prisma.MenuCategoryWhereInput[];
    name?: Prisma.StringFilter<"MenuCategory"> | string;
    weight?: Prisma.IntFilter<"MenuCategory"> | number;
    menuItems?: Prisma.MenuItemListRelationFilter;
  },
  "id"
>;

export type MenuCategoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  weight?: Prisma.SortOrder;
  _count?: Prisma.MenuCategoryCountOrderByAggregateInput;
  _avg?: Prisma.MenuCategoryAvgOrderByAggregateInput;
  _max?: Prisma.MenuCategoryMaxOrderByAggregateInput;
  _min?: Prisma.MenuCategoryMinOrderByAggregateInput;
  _sum?: Prisma.MenuCategorySumOrderByAggregateInput;
};

export type MenuCategoryScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.MenuCategoryScalarWhereWithAggregatesInput
    | Prisma.MenuCategoryScalarWhereWithAggregatesInput[];
  OR?: Prisma.MenuCategoryScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.MenuCategoryScalarWhereWithAggregatesInput
    | Prisma.MenuCategoryScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"MenuCategory"> | number;
  name?: Prisma.StringWithAggregatesFilter<"MenuCategory"> | string;
  weight?: Prisma.IntWithAggregatesFilter<"MenuCategory"> | number;
};

export type MenuCategoryCreateInput = {
  name: string;
  weight: number;
  menuItems?: Prisma.MenuItemCreateNestedManyWithoutCategoryInput;
};

export type MenuCategoryUncheckedCreateInput = {
  id?: number;
  name: string;
  weight: number;
  menuItems?: Prisma.MenuItemUncheckedCreateNestedManyWithoutCategoryInput;
};

export type MenuCategoryUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  weight?: Prisma.IntFieldUpdateOperationsInput | number;
  menuItems?: Prisma.MenuItemUpdateManyWithoutCategoryNestedInput;
};

export type MenuCategoryUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  weight?: Prisma.IntFieldUpdateOperationsInput | number;
  menuItems?: Prisma.MenuItemUncheckedUpdateManyWithoutCategoryNestedInput;
};

export type MenuCategoryCreateManyInput = {
  id?: number;
  name: string;
  weight: number;
};

export type MenuCategoryUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  weight?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type MenuCategoryUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  weight?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type MenuCategoryScalarRelationFilter = {
  is?: Prisma.MenuCategoryWhereInput;
  isNot?: Prisma.MenuCategoryWhereInput;
};

export type MenuCategoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  weight?: Prisma.SortOrder;
};

export type MenuCategoryAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  weight?: Prisma.SortOrder;
};

export type MenuCategoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  weight?: Prisma.SortOrder;
};

export type MenuCategoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  weight?: Prisma.SortOrder;
};

export type MenuCategorySumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  weight?: Prisma.SortOrder;
};

export type MenuCategoryCreateNestedOneWithoutMenuItemsInput = {
  create?: Prisma.XOR<
    Prisma.MenuCategoryCreateWithoutMenuItemsInput,
    Prisma.MenuCategoryUncheckedCreateWithoutMenuItemsInput
  >;
  connectOrCreate?: Prisma.MenuCategoryCreateOrConnectWithoutMenuItemsInput;
  connect?: Prisma.MenuCategoryWhereUniqueInput;
};

export type MenuCategoryUpdateOneRequiredWithoutMenuItemsNestedInput = {
  create?: Prisma.XOR<
    Prisma.MenuCategoryCreateWithoutMenuItemsInput,
    Prisma.MenuCategoryUncheckedCreateWithoutMenuItemsInput
  >;
  connectOrCreate?: Prisma.MenuCategoryCreateOrConnectWithoutMenuItemsInput;
  upsert?: Prisma.MenuCategoryUpsertWithoutMenuItemsInput;
  connect?: Prisma.MenuCategoryWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.MenuCategoryUpdateToOneWithWhereWithoutMenuItemsInput,
      Prisma.MenuCategoryUpdateWithoutMenuItemsInput
    >,
    Prisma.MenuCategoryUncheckedUpdateWithoutMenuItemsInput
  >;
};

export type MenuCategoryCreateWithoutMenuItemsInput = {
  name: string;
  weight: number;
};

export type MenuCategoryUncheckedCreateWithoutMenuItemsInput = {
  id?: number;
  name: string;
  weight: number;
};

export type MenuCategoryCreateOrConnectWithoutMenuItemsInput = {
  where: Prisma.MenuCategoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MenuCategoryCreateWithoutMenuItemsInput,
    Prisma.MenuCategoryUncheckedCreateWithoutMenuItemsInput
  >;
};

export type MenuCategoryUpsertWithoutMenuItemsInput = {
  update: Prisma.XOR<
    Prisma.MenuCategoryUpdateWithoutMenuItemsInput,
    Prisma.MenuCategoryUncheckedUpdateWithoutMenuItemsInput
  >;
  create: Prisma.XOR<
    Prisma.MenuCategoryCreateWithoutMenuItemsInput,
    Prisma.MenuCategoryUncheckedCreateWithoutMenuItemsInput
  >;
  where?: Prisma.MenuCategoryWhereInput;
};

export type MenuCategoryUpdateToOneWithWhereWithoutMenuItemsInput = {
  where?: Prisma.MenuCategoryWhereInput;
  data: Prisma.XOR<
    Prisma.MenuCategoryUpdateWithoutMenuItemsInput,
    Prisma.MenuCategoryUncheckedUpdateWithoutMenuItemsInput
  >;
};

export type MenuCategoryUpdateWithoutMenuItemsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  weight?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type MenuCategoryUncheckedUpdateWithoutMenuItemsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  weight?: Prisma.IntFieldUpdateOperationsInput | number;
};

/**
 * Count Type MenuCategoryCountOutputType
 */

export type MenuCategoryCountOutputType = {
  menuItems: number;
};

export type MenuCategoryCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  menuItems?: boolean | MenuCategoryCountOutputTypeCountMenuItemsArgs;
};

/**
 * MenuCategoryCountOutputType without action
 */
export type MenuCategoryCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MenuCategoryCountOutputType
   */
  select?: Prisma.MenuCategoryCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * MenuCategoryCountOutputType without action
 */
export type MenuCategoryCountOutputTypeCountMenuItemsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MenuItemWhereInput;
};

export type MenuCategorySelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    weight?: boolean;
    menuItems?: boolean | Prisma.MenuCategory$menuItemsArgs<ExtArgs>;
    _count?: boolean | Prisma.MenuCategoryCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["menuCategory"]
>;

export type MenuCategorySelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    weight?: boolean;
  },
  ExtArgs["result"]["menuCategory"]
>;

export type MenuCategorySelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    weight?: boolean;
  },
  ExtArgs["result"]["menuCategory"]
>;

export type MenuCategorySelectScalar = {
  id?: boolean;
  name?: boolean;
  weight?: boolean;
};

export type MenuCategoryOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "weight",
  ExtArgs["result"]["menuCategory"]
>;
export type MenuCategoryInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  menuItems?: boolean | Prisma.MenuCategory$menuItemsArgs<ExtArgs>;
  _count?: boolean | Prisma.MenuCategoryCountOutputTypeDefaultArgs<ExtArgs>;
};
export type MenuCategoryIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type MenuCategoryIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $MenuCategoryPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "MenuCategory";
  objects: {
    menuItems: Prisma.$MenuItemPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      name: string;
      weight: number;
    },
    ExtArgs["result"]["menuCategory"]
  >;
  composites: {};
};

export type MenuCategoryGetPayload<
  S extends boolean | null | undefined | MenuCategoryDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$MenuCategoryPayload, S>;

export type MenuCategoryCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  MenuCategoryFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: MenuCategoryCountAggregateInputType | true;
};

export interface MenuCategoryDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["MenuCategory"];
    meta: { name: "MenuCategory" };
  };
  /**
   * Find zero or one MenuCategory that matches the filter.
   * @param {MenuCategoryFindUniqueArgs} args - Arguments to find a MenuCategory
   * @example
   * // Get one MenuCategory
   * const menuCategory = await prisma.menuCategory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MenuCategoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, MenuCategoryFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__MenuCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MenuCategoryPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one MenuCategory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MenuCategoryFindUniqueOrThrowArgs} args - Arguments to find a MenuCategory
   * @example
   * // Get one MenuCategory
   * const menuCategory = await prisma.menuCategory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MenuCategoryFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, MenuCategoryFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MenuCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MenuCategoryPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MenuCategory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MenuCategoryFindFirstArgs} args - Arguments to find a MenuCategory
   * @example
   * // Get one MenuCategory
   * const menuCategory = await prisma.menuCategory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MenuCategoryFindFirstArgs>(
    args?: Prisma.SelectSubset<T, MenuCategoryFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__MenuCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MenuCategoryPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MenuCategory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MenuCategoryFindFirstOrThrowArgs} args - Arguments to find a MenuCategory
   * @example
   * // Get one MenuCategory
   * const menuCategory = await prisma.menuCategory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MenuCategoryFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, MenuCategoryFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MenuCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MenuCategoryPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more MenuCategories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MenuCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MenuCategories
   * const menuCategories = await prisma.menuCategory.findMany()
   *
   * // Get first 10 MenuCategories
   * const menuCategories = await prisma.menuCategory.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const menuCategoryWithIdOnly = await prisma.menuCategory.findMany({ select: { id: true } })
   *
   */
  findMany<T extends MenuCategoryFindManyArgs>(
    args?: Prisma.SelectSubset<T, MenuCategoryFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MenuCategoryPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a MenuCategory.
   * @param {MenuCategoryCreateArgs} args - Arguments to create a MenuCategory.
   * @example
   * // Create one MenuCategory
   * const MenuCategory = await prisma.menuCategory.create({
   *   data: {
   *     // ... data to create a MenuCategory
   *   }
   * })
   *
   */
  create<T extends MenuCategoryCreateArgs>(
    args: Prisma.SelectSubset<T, MenuCategoryCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__MenuCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MenuCategoryPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many MenuCategories.
   * @param {MenuCategoryCreateManyArgs} args - Arguments to create many MenuCategories.
   * @example
   * // Create many MenuCategories
   * const menuCategory = await prisma.menuCategory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends MenuCategoryCreateManyArgs>(
    args?: Prisma.SelectSubset<T, MenuCategoryCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many MenuCategories and returns the data saved in the database.
   * @param {MenuCategoryCreateManyAndReturnArgs} args - Arguments to create many MenuCategories.
   * @example
   * // Create many MenuCategories
   * const menuCategory = await prisma.menuCategory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many MenuCategories and only return the `id`
   * const menuCategoryWithIdOnly = await prisma.menuCategory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends MenuCategoryCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, MenuCategoryCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MenuCategoryPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a MenuCategory.
   * @param {MenuCategoryDeleteArgs} args - Arguments to delete one MenuCategory.
   * @example
   * // Delete one MenuCategory
   * const MenuCategory = await prisma.menuCategory.delete({
   *   where: {
   *     // ... filter to delete one MenuCategory
   *   }
   * })
   *
   */
  delete<T extends MenuCategoryDeleteArgs>(
    args: Prisma.SelectSubset<T, MenuCategoryDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__MenuCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MenuCategoryPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one MenuCategory.
   * @param {MenuCategoryUpdateArgs} args - Arguments to update one MenuCategory.
   * @example
   * // Update one MenuCategory
   * const menuCategory = await prisma.menuCategory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends MenuCategoryUpdateArgs>(
    args: Prisma.SelectSubset<T, MenuCategoryUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__MenuCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MenuCategoryPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more MenuCategories.
   * @param {MenuCategoryDeleteManyArgs} args - Arguments to filter MenuCategories to delete.
   * @example
   * // Delete a few MenuCategories
   * const { count } = await prisma.menuCategory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends MenuCategoryDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, MenuCategoryDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MenuCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MenuCategoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MenuCategories
   * const menuCategory = await prisma.menuCategory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends MenuCategoryUpdateManyArgs>(
    args: Prisma.SelectSubset<T, MenuCategoryUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MenuCategories and returns the data updated in the database.
   * @param {MenuCategoryUpdateManyAndReturnArgs} args - Arguments to update many MenuCategories.
   * @example
   * // Update many MenuCategories
   * const menuCategory = await prisma.menuCategory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more MenuCategories and only return the `id`
   * const menuCategoryWithIdOnly = await prisma.menuCategory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends MenuCategoryUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, MenuCategoryUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MenuCategoryPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one MenuCategory.
   * @param {MenuCategoryUpsertArgs} args - Arguments to update or create a MenuCategory.
   * @example
   * // Update or create a MenuCategory
   * const menuCategory = await prisma.menuCategory.upsert({
   *   create: {
   *     // ... data to create a MenuCategory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MenuCategory we want to update
   *   }
   * })
   */
  upsert<T extends MenuCategoryUpsertArgs>(
    args: Prisma.SelectSubset<T, MenuCategoryUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__MenuCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MenuCategoryPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of MenuCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MenuCategoryCountArgs} args - Arguments to filter MenuCategories to count.
   * @example
   * // Count the number of MenuCategories
   * const count = await prisma.menuCategory.count({
   *   where: {
   *     // ... the filter for the MenuCategories we want to count
   *   }
   * })
   **/
  count<T extends MenuCategoryCountArgs>(
    args?: Prisma.Subset<T, MenuCategoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            MenuCategoryCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a MenuCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MenuCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends MenuCategoryAggregateArgs>(
    args: Prisma.Subset<T, MenuCategoryAggregateArgs>,
  ): Prisma.PrismaPromise<GetMenuCategoryAggregateType<T>>;

  /**
   * Group by MenuCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MenuCategoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends MenuCategoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MenuCategoryGroupByArgs["orderBy"] }
      : { orderBy?: MenuCategoryGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, MenuCategoryGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetMenuCategoryGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the MenuCategory model
   */
  readonly fields: MenuCategoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MenuCategory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MenuCategoryClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  menuItems<T extends Prisma.MenuCategory$menuItemsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MenuCategory$menuItemsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$MenuItemPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the MenuCategory model
 */
export interface MenuCategoryFieldRefs {
  readonly id: Prisma.FieldRef<"MenuCategory", "Int">;
  readonly name: Prisma.FieldRef<"MenuCategory", "String">;
  readonly weight: Prisma.FieldRef<"MenuCategory", "Int">;
}

// Custom InputTypes
/**
 * MenuCategory findUnique
 */
export type MenuCategoryFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MenuCategory
   */
  select?: Prisma.MenuCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MenuCategory
   */
  omit?: Prisma.MenuCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which MenuCategory to fetch.
   */
  where: Prisma.MenuCategoryWhereUniqueInput;
};

/**
 * MenuCategory findUniqueOrThrow
 */
export type MenuCategoryFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MenuCategory
   */
  select?: Prisma.MenuCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MenuCategory
   */
  omit?: Prisma.MenuCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which MenuCategory to fetch.
   */
  where: Prisma.MenuCategoryWhereUniqueInput;
};

/**
 * MenuCategory findFirst
 */
export type MenuCategoryFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MenuCategory
   */
  select?: Prisma.MenuCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MenuCategory
   */
  omit?: Prisma.MenuCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which MenuCategory to fetch.
   */
  where?: Prisma.MenuCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MenuCategories to fetch.
   */
  orderBy?:
    | Prisma.MenuCategoryOrderByWithRelationInput
    | Prisma.MenuCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MenuCategories.
   */
  cursor?: Prisma.MenuCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MenuCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MenuCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MenuCategories.
   */
  distinct?:
    | Prisma.MenuCategoryScalarFieldEnum
    | Prisma.MenuCategoryScalarFieldEnum[];
};

/**
 * MenuCategory findFirstOrThrow
 */
export type MenuCategoryFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MenuCategory
   */
  select?: Prisma.MenuCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MenuCategory
   */
  omit?: Prisma.MenuCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which MenuCategory to fetch.
   */
  where?: Prisma.MenuCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MenuCategories to fetch.
   */
  orderBy?:
    | Prisma.MenuCategoryOrderByWithRelationInput
    | Prisma.MenuCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MenuCategories.
   */
  cursor?: Prisma.MenuCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MenuCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MenuCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MenuCategories.
   */
  distinct?:
    | Prisma.MenuCategoryScalarFieldEnum
    | Prisma.MenuCategoryScalarFieldEnum[];
};

/**
 * MenuCategory findMany
 */
export type MenuCategoryFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MenuCategory
   */
  select?: Prisma.MenuCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MenuCategory
   */
  omit?: Prisma.MenuCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which MenuCategories to fetch.
   */
  where?: Prisma.MenuCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MenuCategories to fetch.
   */
  orderBy?:
    | Prisma.MenuCategoryOrderByWithRelationInput
    | Prisma.MenuCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing MenuCategories.
   */
  cursor?: Prisma.MenuCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MenuCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MenuCategories.
   */
  skip?: number;
  distinct?:
    | Prisma.MenuCategoryScalarFieldEnum
    | Prisma.MenuCategoryScalarFieldEnum[];
};

/**
 * MenuCategory create
 */
export type MenuCategoryCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MenuCategory
   */
  select?: Prisma.MenuCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MenuCategory
   */
  omit?: Prisma.MenuCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuCategoryInclude<ExtArgs> | null;
  /**
   * The data needed to create a MenuCategory.
   */
  data: Prisma.XOR<
    Prisma.MenuCategoryCreateInput,
    Prisma.MenuCategoryUncheckedCreateInput
  >;
};

/**
 * MenuCategory createMany
 */
export type MenuCategoryCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many MenuCategories.
   */
  data:
    | Prisma.MenuCategoryCreateManyInput
    | Prisma.MenuCategoryCreateManyInput[];
};

/**
 * MenuCategory createManyAndReturn
 */
export type MenuCategoryCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MenuCategory
   */
  select?: Prisma.MenuCategorySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MenuCategory
   */
  omit?: Prisma.MenuCategoryOmit<ExtArgs> | null;
  /**
   * The data used to create many MenuCategories.
   */
  data:
    | Prisma.MenuCategoryCreateManyInput
    | Prisma.MenuCategoryCreateManyInput[];
};

/**
 * MenuCategory update
 */
export type MenuCategoryUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MenuCategory
   */
  select?: Prisma.MenuCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MenuCategory
   */
  omit?: Prisma.MenuCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuCategoryInclude<ExtArgs> | null;
  /**
   * The data needed to update a MenuCategory.
   */
  data: Prisma.XOR<
    Prisma.MenuCategoryUpdateInput,
    Prisma.MenuCategoryUncheckedUpdateInput
  >;
  /**
   * Choose, which MenuCategory to update.
   */
  where: Prisma.MenuCategoryWhereUniqueInput;
};

/**
 * MenuCategory updateMany
 */
export type MenuCategoryUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update MenuCategories.
   */
  data: Prisma.XOR<
    Prisma.MenuCategoryUpdateManyMutationInput,
    Prisma.MenuCategoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which MenuCategories to update
   */
  where?: Prisma.MenuCategoryWhereInput;
  /**
   * Limit how many MenuCategories to update.
   */
  limit?: number;
};

/**
 * MenuCategory updateManyAndReturn
 */
export type MenuCategoryUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MenuCategory
   */
  select?: Prisma.MenuCategorySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MenuCategory
   */
  omit?: Prisma.MenuCategoryOmit<ExtArgs> | null;
  /**
   * The data used to update MenuCategories.
   */
  data: Prisma.XOR<
    Prisma.MenuCategoryUpdateManyMutationInput,
    Prisma.MenuCategoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which MenuCategories to update
   */
  where?: Prisma.MenuCategoryWhereInput;
  /**
   * Limit how many MenuCategories to update.
   */
  limit?: number;
};

/**
 * MenuCategory upsert
 */
export type MenuCategoryUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MenuCategory
   */
  select?: Prisma.MenuCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MenuCategory
   */
  omit?: Prisma.MenuCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuCategoryInclude<ExtArgs> | null;
  /**
   * The filter to search for the MenuCategory to update in case it exists.
   */
  where: Prisma.MenuCategoryWhereUniqueInput;
  /**
   * In case the MenuCategory found by the `where` argument doesn't exist, create a new MenuCategory with this data.
   */
  create: Prisma.XOR<
    Prisma.MenuCategoryCreateInput,
    Prisma.MenuCategoryUncheckedCreateInput
  >;
  /**
   * In case the MenuCategory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.MenuCategoryUpdateInput,
    Prisma.MenuCategoryUncheckedUpdateInput
  >;
};

/**
 * MenuCategory delete
 */
export type MenuCategoryDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MenuCategory
   */
  select?: Prisma.MenuCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MenuCategory
   */
  omit?: Prisma.MenuCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuCategoryInclude<ExtArgs> | null;
  /**
   * Filter which MenuCategory to delete.
   */
  where: Prisma.MenuCategoryWhereUniqueInput;
};

/**
 * MenuCategory deleteMany
 */
export type MenuCategoryDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MenuCategories to delete
   */
  where?: Prisma.MenuCategoryWhereInput;
  /**
   * Limit how many MenuCategories to delete.
   */
  limit?: number;
};

/**
 * MenuCategory.menuItems
 */
export type MenuCategory$menuItemsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MenuItem
   */
  select?: Prisma.MenuItemSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MenuItem
   */
  omit?: Prisma.MenuItemOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuItemInclude<ExtArgs> | null;
  where?: Prisma.MenuItemWhereInput;
  orderBy?:
    | Prisma.MenuItemOrderByWithRelationInput
    | Prisma.MenuItemOrderByWithRelationInput[];
  cursor?: Prisma.MenuItemWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.MenuItemScalarFieldEnum | Prisma.MenuItemScalarFieldEnum[];
};

/**
 * MenuCategory without action
 */
export type MenuCategoryDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MenuCategory
   */
  select?: Prisma.MenuCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MenuCategory
   */
  omit?: Prisma.MenuCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuCategoryInclude<ExtArgs> | null;
};
