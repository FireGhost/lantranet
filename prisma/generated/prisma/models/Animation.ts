
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Animation` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Animation
 * 
 */
export type AnimationModel = runtime.Types.Result.DefaultSelection<Prisma.$AnimationPayload>

export type AggregateAnimation = {
  _count: AnimationCountAggregateOutputType | null
  _avg: AnimationAvgAggregateOutputType | null
  _sum: AnimationSumAggregateOutputType | null
  _min: AnimationMinAggregateOutputType | null
  _max: AnimationMaxAggregateOutputType | null
}

export type AnimationAvgAggregateOutputType = {
  id: number | null
  adminUserId: number | null
  lanDayId: number | null
  weight: number | null
  maxPlayerPerTeam: number | null
}

export type AnimationSumAggregateOutputType = {
  id: number | null
  adminUserId: number | null
  lanDayId: number | null
  weight: number | null
  maxPlayerPerTeam: number | null
}

export type AnimationMinAggregateOutputType = {
  id: number | null
  name: string | null
  shortName: string | null
  description: string | null
  adminUserId: number | null
  lanDayId: number | null
  startTime: string | null
  weight: number | null
  isTeamed: boolean | null
  maxPlayerPerTeam: number | null
  openSubscription: boolean | null
}

export type AnimationMaxAggregateOutputType = {
  id: number | null
  name: string | null
  shortName: string | null
  description: string | null
  adminUserId: number | null
  lanDayId: number | null
  startTime: string | null
  weight: number | null
  isTeamed: boolean | null
  maxPlayerPerTeam: number | null
  openSubscription: boolean | null
}

export type AnimationCountAggregateOutputType = {
  id: number
  name: number
  shortName: number
  description: number
  adminUserId: number
  lanDayId: number
  startTime: number
  weight: number
  isTeamed: number
  maxPlayerPerTeam: number
  openSubscription: number
  _all: number
}


export type AnimationAvgAggregateInputType = {
  id?: true
  adminUserId?: true
  lanDayId?: true
  weight?: true
  maxPlayerPerTeam?: true
}

export type AnimationSumAggregateInputType = {
  id?: true
  adminUserId?: true
  lanDayId?: true
  weight?: true
  maxPlayerPerTeam?: true
}

export type AnimationMinAggregateInputType = {
  id?: true
  name?: true
  shortName?: true
  description?: true
  adminUserId?: true
  lanDayId?: true
  startTime?: true
  weight?: true
  isTeamed?: true
  maxPlayerPerTeam?: true
  openSubscription?: true
}

export type AnimationMaxAggregateInputType = {
  id?: true
  name?: true
  shortName?: true
  description?: true
  adminUserId?: true
  lanDayId?: true
  startTime?: true
  weight?: true
  isTeamed?: true
  maxPlayerPerTeam?: true
  openSubscription?: true
}

export type AnimationCountAggregateInputType = {
  id?: true
  name?: true
  shortName?: true
  description?: true
  adminUserId?: true
  lanDayId?: true
  startTime?: true
  weight?: true
  isTeamed?: true
  maxPlayerPerTeam?: true
  openSubscription?: true
  _all?: true
}

export type AnimationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Animation to aggregate.
   */
  where?: Prisma.AnimationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Animations to fetch.
   */
  orderBy?: Prisma.AnimationOrderByWithRelationInput | Prisma.AnimationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AnimationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Animations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Animations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Animations
  **/
  _count?: true | AnimationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AnimationAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AnimationSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AnimationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AnimationMaxAggregateInputType
}

export type GetAnimationAggregateType<T extends AnimationAggregateArgs> = {
      [P in keyof T & keyof AggregateAnimation]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAnimation[P]>
    : Prisma.GetScalarType<T[P], AggregateAnimation[P]>
}




export type AnimationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AnimationWhereInput
  orderBy?: Prisma.AnimationOrderByWithAggregationInput | Prisma.AnimationOrderByWithAggregationInput[]
  by: Prisma.AnimationScalarFieldEnum[] | Prisma.AnimationScalarFieldEnum
  having?: Prisma.AnimationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AnimationCountAggregateInputType | true
  _avg?: AnimationAvgAggregateInputType
  _sum?: AnimationSumAggregateInputType
  _min?: AnimationMinAggregateInputType
  _max?: AnimationMaxAggregateInputType
}

export type AnimationGroupByOutputType = {
  id: number
  name: string
  shortName: string | null
  description: string | null
  adminUserId: number | null
  lanDayId: number | null
  startTime: string | null
  weight: number
  isTeamed: boolean
  maxPlayerPerTeam: number | null
  openSubscription: boolean
  _count: AnimationCountAggregateOutputType | null
  _avg: AnimationAvgAggregateOutputType | null
  _sum: AnimationSumAggregateOutputType | null
  _min: AnimationMinAggregateOutputType | null
  _max: AnimationMaxAggregateOutputType | null
}

type GetAnimationGroupByPayload<T extends AnimationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AnimationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AnimationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AnimationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AnimationGroupByOutputType[P]>
      }
    >
  >



export type AnimationWhereInput = {
  AND?: Prisma.AnimationWhereInput | Prisma.AnimationWhereInput[]
  OR?: Prisma.AnimationWhereInput[]
  NOT?: Prisma.AnimationWhereInput | Prisma.AnimationWhereInput[]
  id?: Prisma.IntFilter<"Animation"> | number
  name?: Prisma.StringFilter<"Animation"> | string
  shortName?: Prisma.StringNullableFilter<"Animation"> | string | null
  description?: Prisma.StringNullableFilter<"Animation"> | string | null
  adminUserId?: Prisma.IntNullableFilter<"Animation"> | number | null
  lanDayId?: Prisma.IntNullableFilter<"Animation"> | number | null
  startTime?: Prisma.StringNullableFilter<"Animation"> | string | null
  weight?: Prisma.IntFilter<"Animation"> | number
  isTeamed?: Prisma.BoolFilter<"Animation"> | boolean
  maxPlayerPerTeam?: Prisma.IntNullableFilter<"Animation"> | number | null
  openSubscription?: Prisma.BoolFilter<"Animation"> | boolean
  adminUser?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  lanDay?: Prisma.XOR<Prisma.LanDayNullableScalarRelationFilter, Prisma.LanDayWhereInput> | null
  teams?: Prisma.TeamListRelationFilter
  players?: Prisma.AnimationsPlayersListRelationFilter
}

export type AnimationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  shortName?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  adminUserId?: Prisma.SortOrderInput | Prisma.SortOrder
  lanDayId?: Prisma.SortOrderInput | Prisma.SortOrder
  startTime?: Prisma.SortOrderInput | Prisma.SortOrder
  weight?: Prisma.SortOrder
  isTeamed?: Prisma.SortOrder
  maxPlayerPerTeam?: Prisma.SortOrderInput | Prisma.SortOrder
  openSubscription?: Prisma.SortOrder
  adminUser?: Prisma.UserOrderByWithRelationInput
  lanDay?: Prisma.LanDayOrderByWithRelationInput
  teams?: Prisma.TeamOrderByRelationAggregateInput
  players?: Prisma.AnimationsPlayersOrderByRelationAggregateInput
}

export type AnimationWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.AnimationWhereInput | Prisma.AnimationWhereInput[]
  OR?: Prisma.AnimationWhereInput[]
  NOT?: Prisma.AnimationWhereInput | Prisma.AnimationWhereInput[]
  name?: Prisma.StringFilter<"Animation"> | string
  shortName?: Prisma.StringNullableFilter<"Animation"> | string | null
  description?: Prisma.StringNullableFilter<"Animation"> | string | null
  adminUserId?: Prisma.IntNullableFilter<"Animation"> | number | null
  lanDayId?: Prisma.IntNullableFilter<"Animation"> | number | null
  startTime?: Prisma.StringNullableFilter<"Animation"> | string | null
  weight?: Prisma.IntFilter<"Animation"> | number
  isTeamed?: Prisma.BoolFilter<"Animation"> | boolean
  maxPlayerPerTeam?: Prisma.IntNullableFilter<"Animation"> | number | null
  openSubscription?: Prisma.BoolFilter<"Animation"> | boolean
  adminUser?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  lanDay?: Prisma.XOR<Prisma.LanDayNullableScalarRelationFilter, Prisma.LanDayWhereInput> | null
  teams?: Prisma.TeamListRelationFilter
  players?: Prisma.AnimationsPlayersListRelationFilter
}, "id">

export type AnimationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  shortName?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  adminUserId?: Prisma.SortOrderInput | Prisma.SortOrder
  lanDayId?: Prisma.SortOrderInput | Prisma.SortOrder
  startTime?: Prisma.SortOrderInput | Prisma.SortOrder
  weight?: Prisma.SortOrder
  isTeamed?: Prisma.SortOrder
  maxPlayerPerTeam?: Prisma.SortOrderInput | Prisma.SortOrder
  openSubscription?: Prisma.SortOrder
  _count?: Prisma.AnimationCountOrderByAggregateInput
  _avg?: Prisma.AnimationAvgOrderByAggregateInput
  _max?: Prisma.AnimationMaxOrderByAggregateInput
  _min?: Prisma.AnimationMinOrderByAggregateInput
  _sum?: Prisma.AnimationSumOrderByAggregateInput
}

export type AnimationScalarWhereWithAggregatesInput = {
  AND?: Prisma.AnimationScalarWhereWithAggregatesInput | Prisma.AnimationScalarWhereWithAggregatesInput[]
  OR?: Prisma.AnimationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AnimationScalarWhereWithAggregatesInput | Prisma.AnimationScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Animation"> | number
  name?: Prisma.StringWithAggregatesFilter<"Animation"> | string
  shortName?: Prisma.StringNullableWithAggregatesFilter<"Animation"> | string | null
  description?: Prisma.StringNullableWithAggregatesFilter<"Animation"> | string | null
  adminUserId?: Prisma.IntNullableWithAggregatesFilter<"Animation"> | number | null
  lanDayId?: Prisma.IntNullableWithAggregatesFilter<"Animation"> | number | null
  startTime?: Prisma.StringNullableWithAggregatesFilter<"Animation"> | string | null
  weight?: Prisma.IntWithAggregatesFilter<"Animation"> | number
  isTeamed?: Prisma.BoolWithAggregatesFilter<"Animation"> | boolean
  maxPlayerPerTeam?: Prisma.IntNullableWithAggregatesFilter<"Animation"> | number | null
  openSubscription?: Prisma.BoolWithAggregatesFilter<"Animation"> | boolean
}

export type AnimationCreateInput = {
  name: string
  shortName?: string | null
  description?: string | null
  startTime?: string | null
  weight: number
  isTeamed?: boolean
  maxPlayerPerTeam?: number | null
  openSubscription?: boolean
  adminUser?: Prisma.UserCreateNestedOneWithoutAnimationsAsAdminInput
  lanDay?: Prisma.LanDayCreateNestedOneWithoutAnimationsInput
  teams?: Prisma.TeamCreateNestedManyWithoutAnimationInput
  players?: Prisma.AnimationsPlayersCreateNestedManyWithoutAnimationInput
}

export type AnimationUncheckedCreateInput = {
  id?: number
  name: string
  shortName?: string | null
  description?: string | null
  adminUserId?: number | null
  lanDayId?: number | null
  startTime?: string | null
  weight: number
  isTeamed?: boolean
  maxPlayerPerTeam?: number | null
  openSubscription?: boolean
  teams?: Prisma.TeamUncheckedCreateNestedManyWithoutAnimationInput
  players?: Prisma.AnimationsPlayersUncheckedCreateNestedManyWithoutAnimationInput
}

export type AnimationUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  shortName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  isTeamed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxPlayerPerTeam?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  openSubscription?: Prisma.BoolFieldUpdateOperationsInput | boolean
  adminUser?: Prisma.UserUpdateOneWithoutAnimationsAsAdminNestedInput
  lanDay?: Prisma.LanDayUpdateOneWithoutAnimationsNestedInput
  teams?: Prisma.TeamUpdateManyWithoutAnimationNestedInput
  players?: Prisma.AnimationsPlayersUpdateManyWithoutAnimationNestedInput
}

export type AnimationUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  shortName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  adminUserId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lanDayId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  isTeamed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxPlayerPerTeam?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  openSubscription?: Prisma.BoolFieldUpdateOperationsInput | boolean
  teams?: Prisma.TeamUncheckedUpdateManyWithoutAnimationNestedInput
  players?: Prisma.AnimationsPlayersUncheckedUpdateManyWithoutAnimationNestedInput
}

export type AnimationCreateManyInput = {
  id?: number
  name: string
  shortName?: string | null
  description?: string | null
  adminUserId?: number | null
  lanDayId?: number | null
  startTime?: string | null
  weight: number
  isTeamed?: boolean
  maxPlayerPerTeam?: number | null
  openSubscription?: boolean
}

export type AnimationUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  shortName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  isTeamed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxPlayerPerTeam?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  openSubscription?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type AnimationUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  shortName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  adminUserId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lanDayId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  isTeamed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxPlayerPerTeam?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  openSubscription?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type AnimationListRelationFilter = {
  every?: Prisma.AnimationWhereInput
  some?: Prisma.AnimationWhereInput
  none?: Prisma.AnimationWhereInput
}

export type AnimationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AnimationScalarRelationFilter = {
  is?: Prisma.AnimationWhereInput
  isNot?: Prisma.AnimationWhereInput
}

export type AnimationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  shortName?: Prisma.SortOrder
  description?: Prisma.SortOrder
  adminUserId?: Prisma.SortOrder
  lanDayId?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  isTeamed?: Prisma.SortOrder
  maxPlayerPerTeam?: Prisma.SortOrder
  openSubscription?: Prisma.SortOrder
}

export type AnimationAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  adminUserId?: Prisma.SortOrder
  lanDayId?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  maxPlayerPerTeam?: Prisma.SortOrder
}

export type AnimationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  shortName?: Prisma.SortOrder
  description?: Prisma.SortOrder
  adminUserId?: Prisma.SortOrder
  lanDayId?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  isTeamed?: Prisma.SortOrder
  maxPlayerPerTeam?: Prisma.SortOrder
  openSubscription?: Prisma.SortOrder
}

export type AnimationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  shortName?: Prisma.SortOrder
  description?: Prisma.SortOrder
  adminUserId?: Prisma.SortOrder
  lanDayId?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  isTeamed?: Prisma.SortOrder
  maxPlayerPerTeam?: Prisma.SortOrder
  openSubscription?: Prisma.SortOrder
}

export type AnimationSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  adminUserId?: Prisma.SortOrder
  lanDayId?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  maxPlayerPerTeam?: Prisma.SortOrder
}

export type AnimationCreateNestedManyWithoutAdminUserInput = {
  create?: Prisma.XOR<Prisma.AnimationCreateWithoutAdminUserInput, Prisma.AnimationUncheckedCreateWithoutAdminUserInput> | Prisma.AnimationCreateWithoutAdminUserInput[] | Prisma.AnimationUncheckedCreateWithoutAdminUserInput[]
  connectOrCreate?: Prisma.AnimationCreateOrConnectWithoutAdminUserInput | Prisma.AnimationCreateOrConnectWithoutAdminUserInput[]
  createMany?: Prisma.AnimationCreateManyAdminUserInputEnvelope
  connect?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
}

export type AnimationUncheckedCreateNestedManyWithoutAdminUserInput = {
  create?: Prisma.XOR<Prisma.AnimationCreateWithoutAdminUserInput, Prisma.AnimationUncheckedCreateWithoutAdminUserInput> | Prisma.AnimationCreateWithoutAdminUserInput[] | Prisma.AnimationUncheckedCreateWithoutAdminUserInput[]
  connectOrCreate?: Prisma.AnimationCreateOrConnectWithoutAdminUserInput | Prisma.AnimationCreateOrConnectWithoutAdminUserInput[]
  createMany?: Prisma.AnimationCreateManyAdminUserInputEnvelope
  connect?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
}

export type AnimationUpdateManyWithoutAdminUserNestedInput = {
  create?: Prisma.XOR<Prisma.AnimationCreateWithoutAdminUserInput, Prisma.AnimationUncheckedCreateWithoutAdminUserInput> | Prisma.AnimationCreateWithoutAdminUserInput[] | Prisma.AnimationUncheckedCreateWithoutAdminUserInput[]
  connectOrCreate?: Prisma.AnimationCreateOrConnectWithoutAdminUserInput | Prisma.AnimationCreateOrConnectWithoutAdminUserInput[]
  upsert?: Prisma.AnimationUpsertWithWhereUniqueWithoutAdminUserInput | Prisma.AnimationUpsertWithWhereUniqueWithoutAdminUserInput[]
  createMany?: Prisma.AnimationCreateManyAdminUserInputEnvelope
  set?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
  disconnect?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
  delete?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
  connect?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
  update?: Prisma.AnimationUpdateWithWhereUniqueWithoutAdminUserInput | Prisma.AnimationUpdateWithWhereUniqueWithoutAdminUserInput[]
  updateMany?: Prisma.AnimationUpdateManyWithWhereWithoutAdminUserInput | Prisma.AnimationUpdateManyWithWhereWithoutAdminUserInput[]
  deleteMany?: Prisma.AnimationScalarWhereInput | Prisma.AnimationScalarWhereInput[]
}

export type AnimationUncheckedUpdateManyWithoutAdminUserNestedInput = {
  create?: Prisma.XOR<Prisma.AnimationCreateWithoutAdminUserInput, Prisma.AnimationUncheckedCreateWithoutAdminUserInput> | Prisma.AnimationCreateWithoutAdminUserInput[] | Prisma.AnimationUncheckedCreateWithoutAdminUserInput[]
  connectOrCreate?: Prisma.AnimationCreateOrConnectWithoutAdminUserInput | Prisma.AnimationCreateOrConnectWithoutAdminUserInput[]
  upsert?: Prisma.AnimationUpsertWithWhereUniqueWithoutAdminUserInput | Prisma.AnimationUpsertWithWhereUniqueWithoutAdminUserInput[]
  createMany?: Prisma.AnimationCreateManyAdminUserInputEnvelope
  set?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
  disconnect?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
  delete?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
  connect?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
  update?: Prisma.AnimationUpdateWithWhereUniqueWithoutAdminUserInput | Prisma.AnimationUpdateWithWhereUniqueWithoutAdminUserInput[]
  updateMany?: Prisma.AnimationUpdateManyWithWhereWithoutAdminUserInput | Prisma.AnimationUpdateManyWithWhereWithoutAdminUserInput[]
  deleteMany?: Prisma.AnimationScalarWhereInput | Prisma.AnimationScalarWhereInput[]
}

export type AnimationCreateNestedOneWithoutPlayersInput = {
  create?: Prisma.XOR<Prisma.AnimationCreateWithoutPlayersInput, Prisma.AnimationUncheckedCreateWithoutPlayersInput>
  connectOrCreate?: Prisma.AnimationCreateOrConnectWithoutPlayersInput
  connect?: Prisma.AnimationWhereUniqueInput
}

export type AnimationUpdateOneRequiredWithoutPlayersNestedInput = {
  create?: Prisma.XOR<Prisma.AnimationCreateWithoutPlayersInput, Prisma.AnimationUncheckedCreateWithoutPlayersInput>
  connectOrCreate?: Prisma.AnimationCreateOrConnectWithoutPlayersInput
  upsert?: Prisma.AnimationUpsertWithoutPlayersInput
  connect?: Prisma.AnimationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AnimationUpdateToOneWithWhereWithoutPlayersInput, Prisma.AnimationUpdateWithoutPlayersInput>, Prisma.AnimationUncheckedUpdateWithoutPlayersInput>
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type AnimationCreateNestedManyWithoutLanDayInput = {
  create?: Prisma.XOR<Prisma.AnimationCreateWithoutLanDayInput, Prisma.AnimationUncheckedCreateWithoutLanDayInput> | Prisma.AnimationCreateWithoutLanDayInput[] | Prisma.AnimationUncheckedCreateWithoutLanDayInput[]
  connectOrCreate?: Prisma.AnimationCreateOrConnectWithoutLanDayInput | Prisma.AnimationCreateOrConnectWithoutLanDayInput[]
  createMany?: Prisma.AnimationCreateManyLanDayInputEnvelope
  connect?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
}

export type AnimationUncheckedCreateNestedManyWithoutLanDayInput = {
  create?: Prisma.XOR<Prisma.AnimationCreateWithoutLanDayInput, Prisma.AnimationUncheckedCreateWithoutLanDayInput> | Prisma.AnimationCreateWithoutLanDayInput[] | Prisma.AnimationUncheckedCreateWithoutLanDayInput[]
  connectOrCreate?: Prisma.AnimationCreateOrConnectWithoutLanDayInput | Prisma.AnimationCreateOrConnectWithoutLanDayInput[]
  createMany?: Prisma.AnimationCreateManyLanDayInputEnvelope
  connect?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
}

export type AnimationUpdateManyWithoutLanDayNestedInput = {
  create?: Prisma.XOR<Prisma.AnimationCreateWithoutLanDayInput, Prisma.AnimationUncheckedCreateWithoutLanDayInput> | Prisma.AnimationCreateWithoutLanDayInput[] | Prisma.AnimationUncheckedCreateWithoutLanDayInput[]
  connectOrCreate?: Prisma.AnimationCreateOrConnectWithoutLanDayInput | Prisma.AnimationCreateOrConnectWithoutLanDayInput[]
  upsert?: Prisma.AnimationUpsertWithWhereUniqueWithoutLanDayInput | Prisma.AnimationUpsertWithWhereUniqueWithoutLanDayInput[]
  createMany?: Prisma.AnimationCreateManyLanDayInputEnvelope
  set?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
  disconnect?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
  delete?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
  connect?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
  update?: Prisma.AnimationUpdateWithWhereUniqueWithoutLanDayInput | Prisma.AnimationUpdateWithWhereUniqueWithoutLanDayInput[]
  updateMany?: Prisma.AnimationUpdateManyWithWhereWithoutLanDayInput | Prisma.AnimationUpdateManyWithWhereWithoutLanDayInput[]
  deleteMany?: Prisma.AnimationScalarWhereInput | Prisma.AnimationScalarWhereInput[]
}

export type AnimationUncheckedUpdateManyWithoutLanDayNestedInput = {
  create?: Prisma.XOR<Prisma.AnimationCreateWithoutLanDayInput, Prisma.AnimationUncheckedCreateWithoutLanDayInput> | Prisma.AnimationCreateWithoutLanDayInput[] | Prisma.AnimationUncheckedCreateWithoutLanDayInput[]
  connectOrCreate?: Prisma.AnimationCreateOrConnectWithoutLanDayInput | Prisma.AnimationCreateOrConnectWithoutLanDayInput[]
  upsert?: Prisma.AnimationUpsertWithWhereUniqueWithoutLanDayInput | Prisma.AnimationUpsertWithWhereUniqueWithoutLanDayInput[]
  createMany?: Prisma.AnimationCreateManyLanDayInputEnvelope
  set?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
  disconnect?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
  delete?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
  connect?: Prisma.AnimationWhereUniqueInput | Prisma.AnimationWhereUniqueInput[]
  update?: Prisma.AnimationUpdateWithWhereUniqueWithoutLanDayInput | Prisma.AnimationUpdateWithWhereUniqueWithoutLanDayInput[]
  updateMany?: Prisma.AnimationUpdateManyWithWhereWithoutLanDayInput | Prisma.AnimationUpdateManyWithWhereWithoutLanDayInput[]
  deleteMany?: Prisma.AnimationScalarWhereInput | Prisma.AnimationScalarWhereInput[]
}

export type AnimationCreateNestedOneWithoutTeamsInput = {
  create?: Prisma.XOR<Prisma.AnimationCreateWithoutTeamsInput, Prisma.AnimationUncheckedCreateWithoutTeamsInput>
  connectOrCreate?: Prisma.AnimationCreateOrConnectWithoutTeamsInput
  connect?: Prisma.AnimationWhereUniqueInput
}

export type AnimationUpdateOneRequiredWithoutTeamsNestedInput = {
  create?: Prisma.XOR<Prisma.AnimationCreateWithoutTeamsInput, Prisma.AnimationUncheckedCreateWithoutTeamsInput>
  connectOrCreate?: Prisma.AnimationCreateOrConnectWithoutTeamsInput
  upsert?: Prisma.AnimationUpsertWithoutTeamsInput
  connect?: Prisma.AnimationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AnimationUpdateToOneWithWhereWithoutTeamsInput, Prisma.AnimationUpdateWithoutTeamsInput>, Prisma.AnimationUncheckedUpdateWithoutTeamsInput>
}

export type AnimationCreateWithoutAdminUserInput = {
  name: string
  shortName?: string | null
  description?: string | null
  startTime?: string | null
  weight: number
  isTeamed?: boolean
  maxPlayerPerTeam?: number | null
  openSubscription?: boolean
  lanDay?: Prisma.LanDayCreateNestedOneWithoutAnimationsInput
  teams?: Prisma.TeamCreateNestedManyWithoutAnimationInput
  players?: Prisma.AnimationsPlayersCreateNestedManyWithoutAnimationInput
}

export type AnimationUncheckedCreateWithoutAdminUserInput = {
  id?: number
  name: string
  shortName?: string | null
  description?: string | null
  lanDayId?: number | null
  startTime?: string | null
  weight: number
  isTeamed?: boolean
  maxPlayerPerTeam?: number | null
  openSubscription?: boolean
  teams?: Prisma.TeamUncheckedCreateNestedManyWithoutAnimationInput
  players?: Prisma.AnimationsPlayersUncheckedCreateNestedManyWithoutAnimationInput
}

export type AnimationCreateOrConnectWithoutAdminUserInput = {
  where: Prisma.AnimationWhereUniqueInput
  create: Prisma.XOR<Prisma.AnimationCreateWithoutAdminUserInput, Prisma.AnimationUncheckedCreateWithoutAdminUserInput>
}

export type AnimationCreateManyAdminUserInputEnvelope = {
  data: Prisma.AnimationCreateManyAdminUserInput | Prisma.AnimationCreateManyAdminUserInput[]
}

export type AnimationUpsertWithWhereUniqueWithoutAdminUserInput = {
  where: Prisma.AnimationWhereUniqueInput
  update: Prisma.XOR<Prisma.AnimationUpdateWithoutAdminUserInput, Prisma.AnimationUncheckedUpdateWithoutAdminUserInput>
  create: Prisma.XOR<Prisma.AnimationCreateWithoutAdminUserInput, Prisma.AnimationUncheckedCreateWithoutAdminUserInput>
}

export type AnimationUpdateWithWhereUniqueWithoutAdminUserInput = {
  where: Prisma.AnimationWhereUniqueInput
  data: Prisma.XOR<Prisma.AnimationUpdateWithoutAdminUserInput, Prisma.AnimationUncheckedUpdateWithoutAdminUserInput>
}

export type AnimationUpdateManyWithWhereWithoutAdminUserInput = {
  where: Prisma.AnimationScalarWhereInput
  data: Prisma.XOR<Prisma.AnimationUpdateManyMutationInput, Prisma.AnimationUncheckedUpdateManyWithoutAdminUserInput>
}

export type AnimationScalarWhereInput = {
  AND?: Prisma.AnimationScalarWhereInput | Prisma.AnimationScalarWhereInput[]
  OR?: Prisma.AnimationScalarWhereInput[]
  NOT?: Prisma.AnimationScalarWhereInput | Prisma.AnimationScalarWhereInput[]
  id?: Prisma.IntFilter<"Animation"> | number
  name?: Prisma.StringFilter<"Animation"> | string
  shortName?: Prisma.StringNullableFilter<"Animation"> | string | null
  description?: Prisma.StringNullableFilter<"Animation"> | string | null
  adminUserId?: Prisma.IntNullableFilter<"Animation"> | number | null
  lanDayId?: Prisma.IntNullableFilter<"Animation"> | number | null
  startTime?: Prisma.StringNullableFilter<"Animation"> | string | null
  weight?: Prisma.IntFilter<"Animation"> | number
  isTeamed?: Prisma.BoolFilter<"Animation"> | boolean
  maxPlayerPerTeam?: Prisma.IntNullableFilter<"Animation"> | number | null
  openSubscription?: Prisma.BoolFilter<"Animation"> | boolean
}

export type AnimationCreateWithoutPlayersInput = {
  name: string
  shortName?: string | null
  description?: string | null
  startTime?: string | null
  weight: number
  isTeamed?: boolean
  maxPlayerPerTeam?: number | null
  openSubscription?: boolean
  adminUser?: Prisma.UserCreateNestedOneWithoutAnimationsAsAdminInput
  lanDay?: Prisma.LanDayCreateNestedOneWithoutAnimationsInput
  teams?: Prisma.TeamCreateNestedManyWithoutAnimationInput
}

export type AnimationUncheckedCreateWithoutPlayersInput = {
  id?: number
  name: string
  shortName?: string | null
  description?: string | null
  adminUserId?: number | null
  lanDayId?: number | null
  startTime?: string | null
  weight: number
  isTeamed?: boolean
  maxPlayerPerTeam?: number | null
  openSubscription?: boolean
  teams?: Prisma.TeamUncheckedCreateNestedManyWithoutAnimationInput
}

export type AnimationCreateOrConnectWithoutPlayersInput = {
  where: Prisma.AnimationWhereUniqueInput
  create: Prisma.XOR<Prisma.AnimationCreateWithoutPlayersInput, Prisma.AnimationUncheckedCreateWithoutPlayersInput>
}

export type AnimationUpsertWithoutPlayersInput = {
  update: Prisma.XOR<Prisma.AnimationUpdateWithoutPlayersInput, Prisma.AnimationUncheckedUpdateWithoutPlayersInput>
  create: Prisma.XOR<Prisma.AnimationCreateWithoutPlayersInput, Prisma.AnimationUncheckedCreateWithoutPlayersInput>
  where?: Prisma.AnimationWhereInput
}

export type AnimationUpdateToOneWithWhereWithoutPlayersInput = {
  where?: Prisma.AnimationWhereInput
  data: Prisma.XOR<Prisma.AnimationUpdateWithoutPlayersInput, Prisma.AnimationUncheckedUpdateWithoutPlayersInput>
}

export type AnimationUpdateWithoutPlayersInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  shortName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  isTeamed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxPlayerPerTeam?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  openSubscription?: Prisma.BoolFieldUpdateOperationsInput | boolean
  adminUser?: Prisma.UserUpdateOneWithoutAnimationsAsAdminNestedInput
  lanDay?: Prisma.LanDayUpdateOneWithoutAnimationsNestedInput
  teams?: Prisma.TeamUpdateManyWithoutAnimationNestedInput
}

export type AnimationUncheckedUpdateWithoutPlayersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  shortName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  adminUserId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lanDayId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  isTeamed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxPlayerPerTeam?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  openSubscription?: Prisma.BoolFieldUpdateOperationsInput | boolean
  teams?: Prisma.TeamUncheckedUpdateManyWithoutAnimationNestedInput
}

export type AnimationCreateWithoutLanDayInput = {
  name: string
  shortName?: string | null
  description?: string | null
  startTime?: string | null
  weight: number
  isTeamed?: boolean
  maxPlayerPerTeam?: number | null
  openSubscription?: boolean
  adminUser?: Prisma.UserCreateNestedOneWithoutAnimationsAsAdminInput
  teams?: Prisma.TeamCreateNestedManyWithoutAnimationInput
  players?: Prisma.AnimationsPlayersCreateNestedManyWithoutAnimationInput
}

export type AnimationUncheckedCreateWithoutLanDayInput = {
  id?: number
  name: string
  shortName?: string | null
  description?: string | null
  adminUserId?: number | null
  startTime?: string | null
  weight: number
  isTeamed?: boolean
  maxPlayerPerTeam?: number | null
  openSubscription?: boolean
  teams?: Prisma.TeamUncheckedCreateNestedManyWithoutAnimationInput
  players?: Prisma.AnimationsPlayersUncheckedCreateNestedManyWithoutAnimationInput
}

export type AnimationCreateOrConnectWithoutLanDayInput = {
  where: Prisma.AnimationWhereUniqueInput
  create: Prisma.XOR<Prisma.AnimationCreateWithoutLanDayInput, Prisma.AnimationUncheckedCreateWithoutLanDayInput>
}

export type AnimationCreateManyLanDayInputEnvelope = {
  data: Prisma.AnimationCreateManyLanDayInput | Prisma.AnimationCreateManyLanDayInput[]
}

export type AnimationUpsertWithWhereUniqueWithoutLanDayInput = {
  where: Prisma.AnimationWhereUniqueInput
  update: Prisma.XOR<Prisma.AnimationUpdateWithoutLanDayInput, Prisma.AnimationUncheckedUpdateWithoutLanDayInput>
  create: Prisma.XOR<Prisma.AnimationCreateWithoutLanDayInput, Prisma.AnimationUncheckedCreateWithoutLanDayInput>
}

export type AnimationUpdateWithWhereUniqueWithoutLanDayInput = {
  where: Prisma.AnimationWhereUniqueInput
  data: Prisma.XOR<Prisma.AnimationUpdateWithoutLanDayInput, Prisma.AnimationUncheckedUpdateWithoutLanDayInput>
}

export type AnimationUpdateManyWithWhereWithoutLanDayInput = {
  where: Prisma.AnimationScalarWhereInput
  data: Prisma.XOR<Prisma.AnimationUpdateManyMutationInput, Prisma.AnimationUncheckedUpdateManyWithoutLanDayInput>
}

export type AnimationCreateWithoutTeamsInput = {
  name: string
  shortName?: string | null
  description?: string | null
  startTime?: string | null
  weight: number
  isTeamed?: boolean
  maxPlayerPerTeam?: number | null
  openSubscription?: boolean
  adminUser?: Prisma.UserCreateNestedOneWithoutAnimationsAsAdminInput
  lanDay?: Prisma.LanDayCreateNestedOneWithoutAnimationsInput
  players?: Prisma.AnimationsPlayersCreateNestedManyWithoutAnimationInput
}

export type AnimationUncheckedCreateWithoutTeamsInput = {
  id?: number
  name: string
  shortName?: string | null
  description?: string | null
  adminUserId?: number | null
  lanDayId?: number | null
  startTime?: string | null
  weight: number
  isTeamed?: boolean
  maxPlayerPerTeam?: number | null
  openSubscription?: boolean
  players?: Prisma.AnimationsPlayersUncheckedCreateNestedManyWithoutAnimationInput
}

export type AnimationCreateOrConnectWithoutTeamsInput = {
  where: Prisma.AnimationWhereUniqueInput
  create: Prisma.XOR<Prisma.AnimationCreateWithoutTeamsInput, Prisma.AnimationUncheckedCreateWithoutTeamsInput>
}

export type AnimationUpsertWithoutTeamsInput = {
  update: Prisma.XOR<Prisma.AnimationUpdateWithoutTeamsInput, Prisma.AnimationUncheckedUpdateWithoutTeamsInput>
  create: Prisma.XOR<Prisma.AnimationCreateWithoutTeamsInput, Prisma.AnimationUncheckedCreateWithoutTeamsInput>
  where?: Prisma.AnimationWhereInput
}

export type AnimationUpdateToOneWithWhereWithoutTeamsInput = {
  where?: Prisma.AnimationWhereInput
  data: Prisma.XOR<Prisma.AnimationUpdateWithoutTeamsInput, Prisma.AnimationUncheckedUpdateWithoutTeamsInput>
}

export type AnimationUpdateWithoutTeamsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  shortName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  isTeamed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxPlayerPerTeam?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  openSubscription?: Prisma.BoolFieldUpdateOperationsInput | boolean
  adminUser?: Prisma.UserUpdateOneWithoutAnimationsAsAdminNestedInput
  lanDay?: Prisma.LanDayUpdateOneWithoutAnimationsNestedInput
  players?: Prisma.AnimationsPlayersUpdateManyWithoutAnimationNestedInput
}

export type AnimationUncheckedUpdateWithoutTeamsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  shortName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  adminUserId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lanDayId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  isTeamed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxPlayerPerTeam?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  openSubscription?: Prisma.BoolFieldUpdateOperationsInput | boolean
  players?: Prisma.AnimationsPlayersUncheckedUpdateManyWithoutAnimationNestedInput
}

export type AnimationCreateManyAdminUserInput = {
  id?: number
  name: string
  shortName?: string | null
  description?: string | null
  lanDayId?: number | null
  startTime?: string | null
  weight: number
  isTeamed?: boolean
  maxPlayerPerTeam?: number | null
  openSubscription?: boolean
}

export type AnimationUpdateWithoutAdminUserInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  shortName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  isTeamed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxPlayerPerTeam?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  openSubscription?: Prisma.BoolFieldUpdateOperationsInput | boolean
  lanDay?: Prisma.LanDayUpdateOneWithoutAnimationsNestedInput
  teams?: Prisma.TeamUpdateManyWithoutAnimationNestedInput
  players?: Prisma.AnimationsPlayersUpdateManyWithoutAnimationNestedInput
}

export type AnimationUncheckedUpdateWithoutAdminUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  shortName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lanDayId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  isTeamed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxPlayerPerTeam?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  openSubscription?: Prisma.BoolFieldUpdateOperationsInput | boolean
  teams?: Prisma.TeamUncheckedUpdateManyWithoutAnimationNestedInput
  players?: Prisma.AnimationsPlayersUncheckedUpdateManyWithoutAnimationNestedInput
}

export type AnimationUncheckedUpdateManyWithoutAdminUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  shortName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lanDayId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  isTeamed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxPlayerPerTeam?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  openSubscription?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type AnimationCreateManyLanDayInput = {
  id?: number
  name: string
  shortName?: string | null
  description?: string | null
  adminUserId?: number | null
  startTime?: string | null
  weight: number
  isTeamed?: boolean
  maxPlayerPerTeam?: number | null
  openSubscription?: boolean
}

export type AnimationUpdateWithoutLanDayInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  shortName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  isTeamed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxPlayerPerTeam?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  openSubscription?: Prisma.BoolFieldUpdateOperationsInput | boolean
  adminUser?: Prisma.UserUpdateOneWithoutAnimationsAsAdminNestedInput
  teams?: Prisma.TeamUpdateManyWithoutAnimationNestedInput
  players?: Prisma.AnimationsPlayersUpdateManyWithoutAnimationNestedInput
}

export type AnimationUncheckedUpdateWithoutLanDayInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  shortName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  adminUserId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  isTeamed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxPlayerPerTeam?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  openSubscription?: Prisma.BoolFieldUpdateOperationsInput | boolean
  teams?: Prisma.TeamUncheckedUpdateManyWithoutAnimationNestedInput
  players?: Prisma.AnimationsPlayersUncheckedUpdateManyWithoutAnimationNestedInput
}

export type AnimationUncheckedUpdateManyWithoutLanDayInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  shortName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  adminUserId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  isTeamed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxPlayerPerTeam?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  openSubscription?: Prisma.BoolFieldUpdateOperationsInput | boolean
}


/**
 * Count Type AnimationCountOutputType
 */

export type AnimationCountOutputType = {
  teams: number
  players: number
}

export type AnimationCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  teams?: boolean | AnimationCountOutputTypeCountTeamsArgs
  players?: boolean | AnimationCountOutputTypeCountPlayersArgs
}

/**
 * AnimationCountOutputType without action
 */
export type AnimationCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnimationCountOutputType
   */
  select?: Prisma.AnimationCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AnimationCountOutputType without action
 */
export type AnimationCountOutputTypeCountTeamsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TeamWhereInput
}

/**
 * AnimationCountOutputType without action
 */
export type AnimationCountOutputTypeCountPlayersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AnimationsPlayersWhereInput
}


export type AnimationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  shortName?: boolean
  description?: boolean
  adminUserId?: boolean
  lanDayId?: boolean
  startTime?: boolean
  weight?: boolean
  isTeamed?: boolean
  maxPlayerPerTeam?: boolean
  openSubscription?: boolean
  adminUser?: boolean | Prisma.Animation$adminUserArgs<ExtArgs>
  lanDay?: boolean | Prisma.Animation$lanDayArgs<ExtArgs>
  teams?: boolean | Prisma.Animation$teamsArgs<ExtArgs>
  players?: boolean | Prisma.Animation$playersArgs<ExtArgs>
  _count?: boolean | Prisma.AnimationCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["animation"]>

export type AnimationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  shortName?: boolean
  description?: boolean
  adminUserId?: boolean
  lanDayId?: boolean
  startTime?: boolean
  weight?: boolean
  isTeamed?: boolean
  maxPlayerPerTeam?: boolean
  openSubscription?: boolean
  adminUser?: boolean | Prisma.Animation$adminUserArgs<ExtArgs>
  lanDay?: boolean | Prisma.Animation$lanDayArgs<ExtArgs>
}, ExtArgs["result"]["animation"]>

export type AnimationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  shortName?: boolean
  description?: boolean
  adminUserId?: boolean
  lanDayId?: boolean
  startTime?: boolean
  weight?: boolean
  isTeamed?: boolean
  maxPlayerPerTeam?: boolean
  openSubscription?: boolean
  adminUser?: boolean | Prisma.Animation$adminUserArgs<ExtArgs>
  lanDay?: boolean | Prisma.Animation$lanDayArgs<ExtArgs>
}, ExtArgs["result"]["animation"]>

export type AnimationSelectScalar = {
  id?: boolean
  name?: boolean
  shortName?: boolean
  description?: boolean
  adminUserId?: boolean
  lanDayId?: boolean
  startTime?: boolean
  weight?: boolean
  isTeamed?: boolean
  maxPlayerPerTeam?: boolean
  openSubscription?: boolean
}

export type AnimationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "shortName" | "description" | "adminUserId" | "lanDayId" | "startTime" | "weight" | "isTeamed" | "maxPlayerPerTeam" | "openSubscription", ExtArgs["result"]["animation"]>
export type AnimationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  adminUser?: boolean | Prisma.Animation$adminUserArgs<ExtArgs>
  lanDay?: boolean | Prisma.Animation$lanDayArgs<ExtArgs>
  teams?: boolean | Prisma.Animation$teamsArgs<ExtArgs>
  players?: boolean | Prisma.Animation$playersArgs<ExtArgs>
  _count?: boolean | Prisma.AnimationCountOutputTypeDefaultArgs<ExtArgs>
}
export type AnimationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  adminUser?: boolean | Prisma.Animation$adminUserArgs<ExtArgs>
  lanDay?: boolean | Prisma.Animation$lanDayArgs<ExtArgs>
}
export type AnimationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  adminUser?: boolean | Prisma.Animation$adminUserArgs<ExtArgs>
  lanDay?: boolean | Prisma.Animation$lanDayArgs<ExtArgs>
}

export type $AnimationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Animation"
  objects: {
    adminUser: Prisma.$UserPayload<ExtArgs> | null
    lanDay: Prisma.$LanDayPayload<ExtArgs> | null
    teams: Prisma.$TeamPayload<ExtArgs>[]
    players: Prisma.$AnimationsPlayersPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    shortName: string | null
    description: string | null
    adminUserId: number | null
    lanDayId: number | null
    startTime: string | null
    weight: number
    isTeamed: boolean
    maxPlayerPerTeam: number | null
    openSubscription: boolean
  }, ExtArgs["result"]["animation"]>
  composites: {}
}

export type AnimationGetPayload<S extends boolean | null | undefined | AnimationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AnimationPayload, S>

export type AnimationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AnimationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AnimationCountAggregateInputType | true
  }

export interface AnimationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Animation'], meta: { name: 'Animation' } }
  /**
   * Find zero or one Animation that matches the filter.
   * @param {AnimationFindUniqueArgs} args - Arguments to find a Animation
   * @example
   * // Get one Animation
   * const animation = await prisma.animation.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AnimationFindUniqueArgs>(args: Prisma.SelectSubset<T, AnimationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AnimationClient<runtime.Types.Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Animation that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AnimationFindUniqueOrThrowArgs} args - Arguments to find a Animation
   * @example
   * // Get one Animation
   * const animation = await prisma.animation.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AnimationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AnimationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AnimationClient<runtime.Types.Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Animation that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnimationFindFirstArgs} args - Arguments to find a Animation
   * @example
   * // Get one Animation
   * const animation = await prisma.animation.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AnimationFindFirstArgs>(args?: Prisma.SelectSubset<T, AnimationFindFirstArgs<ExtArgs>>): Prisma.Prisma__AnimationClient<runtime.Types.Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Animation that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnimationFindFirstOrThrowArgs} args - Arguments to find a Animation
   * @example
   * // Get one Animation
   * const animation = await prisma.animation.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AnimationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AnimationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AnimationClient<runtime.Types.Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Animations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnimationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Animations
   * const animations = await prisma.animation.findMany()
   * 
   * // Get first 10 Animations
   * const animations = await prisma.animation.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const animationWithIdOnly = await prisma.animation.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AnimationFindManyArgs>(args?: Prisma.SelectSubset<T, AnimationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Animation.
   * @param {AnimationCreateArgs} args - Arguments to create a Animation.
   * @example
   * // Create one Animation
   * const Animation = await prisma.animation.create({
   *   data: {
   *     // ... data to create a Animation
   *   }
   * })
   * 
   */
  create<T extends AnimationCreateArgs>(args: Prisma.SelectSubset<T, AnimationCreateArgs<ExtArgs>>): Prisma.Prisma__AnimationClient<runtime.Types.Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Animations.
   * @param {AnimationCreateManyArgs} args - Arguments to create many Animations.
   * @example
   * // Create many Animations
   * const animation = await prisma.animation.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AnimationCreateManyArgs>(args?: Prisma.SelectSubset<T, AnimationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Animations and returns the data saved in the database.
   * @param {AnimationCreateManyAndReturnArgs} args - Arguments to create many Animations.
   * @example
   * // Create many Animations
   * const animation = await prisma.animation.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Animations and only return the `id`
   * const animationWithIdOnly = await prisma.animation.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AnimationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AnimationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Animation.
   * @param {AnimationDeleteArgs} args - Arguments to delete one Animation.
   * @example
   * // Delete one Animation
   * const Animation = await prisma.animation.delete({
   *   where: {
   *     // ... filter to delete one Animation
   *   }
   * })
   * 
   */
  delete<T extends AnimationDeleteArgs>(args: Prisma.SelectSubset<T, AnimationDeleteArgs<ExtArgs>>): Prisma.Prisma__AnimationClient<runtime.Types.Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Animation.
   * @param {AnimationUpdateArgs} args - Arguments to update one Animation.
   * @example
   * // Update one Animation
   * const animation = await prisma.animation.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AnimationUpdateArgs>(args: Prisma.SelectSubset<T, AnimationUpdateArgs<ExtArgs>>): Prisma.Prisma__AnimationClient<runtime.Types.Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Animations.
   * @param {AnimationDeleteManyArgs} args - Arguments to filter Animations to delete.
   * @example
   * // Delete a few Animations
   * const { count } = await prisma.animation.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AnimationDeleteManyArgs>(args?: Prisma.SelectSubset<T, AnimationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Animations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnimationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Animations
   * const animation = await prisma.animation.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AnimationUpdateManyArgs>(args: Prisma.SelectSubset<T, AnimationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Animations and returns the data updated in the database.
   * @param {AnimationUpdateManyAndReturnArgs} args - Arguments to update many Animations.
   * @example
   * // Update many Animations
   * const animation = await prisma.animation.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Animations and only return the `id`
   * const animationWithIdOnly = await prisma.animation.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AnimationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AnimationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Animation.
   * @param {AnimationUpsertArgs} args - Arguments to update or create a Animation.
   * @example
   * // Update or create a Animation
   * const animation = await prisma.animation.upsert({
   *   create: {
   *     // ... data to create a Animation
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Animation we want to update
   *   }
   * })
   */
  upsert<T extends AnimationUpsertArgs>(args: Prisma.SelectSubset<T, AnimationUpsertArgs<ExtArgs>>): Prisma.Prisma__AnimationClient<runtime.Types.Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Animations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnimationCountArgs} args - Arguments to filter Animations to count.
   * @example
   * // Count the number of Animations
   * const count = await prisma.animation.count({
   *   where: {
   *     // ... the filter for the Animations we want to count
   *   }
   * })
  **/
  count<T extends AnimationCountArgs>(
    args?: Prisma.Subset<T, AnimationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AnimationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Animation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnimationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AnimationAggregateArgs>(args: Prisma.Subset<T, AnimationAggregateArgs>): Prisma.PrismaPromise<GetAnimationAggregateType<T>>

  /**
   * Group by Animation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnimationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AnimationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AnimationGroupByArgs['orderBy'] }
      : { orderBy?: AnimationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AnimationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Animation model
 */
readonly fields: AnimationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Animation.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AnimationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  adminUser<T extends Prisma.Animation$adminUserArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Animation$adminUserArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  lanDay<T extends Prisma.Animation$lanDayArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Animation$lanDayArgs<ExtArgs>>): Prisma.Prisma__LanDayClient<runtime.Types.Result.GetResult<Prisma.$LanDayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  teams<T extends Prisma.Animation$teamsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Animation$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  players<T extends Prisma.Animation$playersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Animation$playersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnimationsPlayersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Animation model
 */
export interface AnimationFieldRefs {
  readonly id: Prisma.FieldRef<"Animation", 'Int'>
  readonly name: Prisma.FieldRef<"Animation", 'String'>
  readonly shortName: Prisma.FieldRef<"Animation", 'String'>
  readonly description: Prisma.FieldRef<"Animation", 'String'>
  readonly adminUserId: Prisma.FieldRef<"Animation", 'Int'>
  readonly lanDayId: Prisma.FieldRef<"Animation", 'Int'>
  readonly startTime: Prisma.FieldRef<"Animation", 'String'>
  readonly weight: Prisma.FieldRef<"Animation", 'Int'>
  readonly isTeamed: Prisma.FieldRef<"Animation", 'Boolean'>
  readonly maxPlayerPerTeam: Prisma.FieldRef<"Animation", 'Int'>
  readonly openSubscription: Prisma.FieldRef<"Animation", 'Boolean'>
}
    

// Custom InputTypes
/**
 * Animation findUnique
 */
export type AnimationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Animation
   */
  select?: Prisma.AnimationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Animation
   */
  omit?: Prisma.AnimationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationInclude<ExtArgs> | null
  /**
   * Filter, which Animation to fetch.
   */
  where: Prisma.AnimationWhereUniqueInput
}

/**
 * Animation findUniqueOrThrow
 */
export type AnimationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Animation
   */
  select?: Prisma.AnimationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Animation
   */
  omit?: Prisma.AnimationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationInclude<ExtArgs> | null
  /**
   * Filter, which Animation to fetch.
   */
  where: Prisma.AnimationWhereUniqueInput
}

/**
 * Animation findFirst
 */
export type AnimationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Animation
   */
  select?: Prisma.AnimationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Animation
   */
  omit?: Prisma.AnimationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationInclude<ExtArgs> | null
  /**
   * Filter, which Animation to fetch.
   */
  where?: Prisma.AnimationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Animations to fetch.
   */
  orderBy?: Prisma.AnimationOrderByWithRelationInput | Prisma.AnimationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Animations.
   */
  cursor?: Prisma.AnimationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Animations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Animations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Animations.
   */
  distinct?: Prisma.AnimationScalarFieldEnum | Prisma.AnimationScalarFieldEnum[]
}

/**
 * Animation findFirstOrThrow
 */
export type AnimationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Animation
   */
  select?: Prisma.AnimationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Animation
   */
  omit?: Prisma.AnimationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationInclude<ExtArgs> | null
  /**
   * Filter, which Animation to fetch.
   */
  where?: Prisma.AnimationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Animations to fetch.
   */
  orderBy?: Prisma.AnimationOrderByWithRelationInput | Prisma.AnimationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Animations.
   */
  cursor?: Prisma.AnimationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Animations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Animations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Animations.
   */
  distinct?: Prisma.AnimationScalarFieldEnum | Prisma.AnimationScalarFieldEnum[]
}

/**
 * Animation findMany
 */
export type AnimationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Animation
   */
  select?: Prisma.AnimationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Animation
   */
  omit?: Prisma.AnimationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationInclude<ExtArgs> | null
  /**
   * Filter, which Animations to fetch.
   */
  where?: Prisma.AnimationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Animations to fetch.
   */
  orderBy?: Prisma.AnimationOrderByWithRelationInput | Prisma.AnimationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Animations.
   */
  cursor?: Prisma.AnimationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Animations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Animations.
   */
  skip?: number
  distinct?: Prisma.AnimationScalarFieldEnum | Prisma.AnimationScalarFieldEnum[]
}

/**
 * Animation create
 */
export type AnimationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Animation
   */
  select?: Prisma.AnimationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Animation
   */
  omit?: Prisma.AnimationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationInclude<ExtArgs> | null
  /**
   * The data needed to create a Animation.
   */
  data: Prisma.XOR<Prisma.AnimationCreateInput, Prisma.AnimationUncheckedCreateInput>
}

/**
 * Animation createMany
 */
export type AnimationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Animations.
   */
  data: Prisma.AnimationCreateManyInput | Prisma.AnimationCreateManyInput[]
}

/**
 * Animation createManyAndReturn
 */
export type AnimationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Animation
   */
  select?: Prisma.AnimationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Animation
   */
  omit?: Prisma.AnimationOmit<ExtArgs> | null
  /**
   * The data used to create many Animations.
   */
  data: Prisma.AnimationCreateManyInput | Prisma.AnimationCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Animation update
 */
export type AnimationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Animation
   */
  select?: Prisma.AnimationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Animation
   */
  omit?: Prisma.AnimationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationInclude<ExtArgs> | null
  /**
   * The data needed to update a Animation.
   */
  data: Prisma.XOR<Prisma.AnimationUpdateInput, Prisma.AnimationUncheckedUpdateInput>
  /**
   * Choose, which Animation to update.
   */
  where: Prisma.AnimationWhereUniqueInput
}

/**
 * Animation updateMany
 */
export type AnimationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Animations.
   */
  data: Prisma.XOR<Prisma.AnimationUpdateManyMutationInput, Prisma.AnimationUncheckedUpdateManyInput>
  /**
   * Filter which Animations to update
   */
  where?: Prisma.AnimationWhereInput
  /**
   * Limit how many Animations to update.
   */
  limit?: number
}

/**
 * Animation updateManyAndReturn
 */
export type AnimationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Animation
   */
  select?: Prisma.AnimationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Animation
   */
  omit?: Prisma.AnimationOmit<ExtArgs> | null
  /**
   * The data used to update Animations.
   */
  data: Prisma.XOR<Prisma.AnimationUpdateManyMutationInput, Prisma.AnimationUncheckedUpdateManyInput>
  /**
   * Filter which Animations to update
   */
  where?: Prisma.AnimationWhereInput
  /**
   * Limit how many Animations to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Animation upsert
 */
export type AnimationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Animation
   */
  select?: Prisma.AnimationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Animation
   */
  omit?: Prisma.AnimationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationInclude<ExtArgs> | null
  /**
   * The filter to search for the Animation to update in case it exists.
   */
  where: Prisma.AnimationWhereUniqueInput
  /**
   * In case the Animation found by the `where` argument doesn't exist, create a new Animation with this data.
   */
  create: Prisma.XOR<Prisma.AnimationCreateInput, Prisma.AnimationUncheckedCreateInput>
  /**
   * In case the Animation was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AnimationUpdateInput, Prisma.AnimationUncheckedUpdateInput>
}

/**
 * Animation delete
 */
export type AnimationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Animation
   */
  select?: Prisma.AnimationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Animation
   */
  omit?: Prisma.AnimationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationInclude<ExtArgs> | null
  /**
   * Filter which Animation to delete.
   */
  where: Prisma.AnimationWhereUniqueInput
}

/**
 * Animation deleteMany
 */
export type AnimationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Animations to delete
   */
  where?: Prisma.AnimationWhereInput
  /**
   * Limit how many Animations to delete.
   */
  limit?: number
}

/**
 * Animation.adminUser
 */
export type Animation$adminUserArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * Animation.lanDay
 */
export type Animation$lanDayArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LanDay
   */
  select?: Prisma.LanDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LanDay
   */
  omit?: Prisma.LanDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanDayInclude<ExtArgs> | null
  where?: Prisma.LanDayWhereInput
}

/**
 * Animation.teams
 */
export type Animation$teamsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null
  where?: Prisma.TeamWhereInput
  orderBy?: Prisma.TeamOrderByWithRelationInput | Prisma.TeamOrderByWithRelationInput[]
  cursor?: Prisma.TeamWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TeamScalarFieldEnum | Prisma.TeamScalarFieldEnum[]
}

/**
 * Animation.players
 */
export type Animation$playersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnimationsPlayers
   */
  select?: Prisma.AnimationsPlayersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnimationsPlayers
   */
  omit?: Prisma.AnimationsPlayersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationsPlayersInclude<ExtArgs> | null
  where?: Prisma.AnimationsPlayersWhereInput
  orderBy?: Prisma.AnimationsPlayersOrderByWithRelationInput | Prisma.AnimationsPlayersOrderByWithRelationInput[]
  cursor?: Prisma.AnimationsPlayersWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AnimationsPlayersScalarFieldEnum | Prisma.AnimationsPlayersScalarFieldEnum[]
}

/**
 * Animation without action
 */
export type AnimationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Animation
   */
  select?: Prisma.AnimationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Animation
   */
  omit?: Prisma.AnimationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationInclude<ExtArgs> | null
}
