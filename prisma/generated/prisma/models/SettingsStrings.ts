
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SettingsStrings` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model SettingsStrings
 * 
 */
export type SettingsStringsModel = runtime.Types.Result.DefaultSelection<Prisma.$SettingsStringsPayload>

export type AggregateSettingsStrings = {
  _count: SettingsStringsCountAggregateOutputType | null
  _min: SettingsStringsMinAggregateOutputType | null
  _max: SettingsStringsMaxAggregateOutputType | null
}

export type SettingsStringsMinAggregateOutputType = {
  key: string | null
  value: string | null
}

export type SettingsStringsMaxAggregateOutputType = {
  key: string | null
  value: string | null
}

export type SettingsStringsCountAggregateOutputType = {
  key: number
  value: number
  _all: number
}


export type SettingsStringsMinAggregateInputType = {
  key?: true
  value?: true
}

export type SettingsStringsMaxAggregateInputType = {
  key?: true
  value?: true
}

export type SettingsStringsCountAggregateInputType = {
  key?: true
  value?: true
  _all?: true
}

export type SettingsStringsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SettingsStrings to aggregate.
   */
  where?: Prisma.SettingsStringsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SettingsStrings to fetch.
   */
  orderBy?: Prisma.SettingsStringsOrderByWithRelationInput | Prisma.SettingsStringsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SettingsStringsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SettingsStrings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SettingsStrings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SettingsStrings
  **/
  _count?: true | SettingsStringsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SettingsStringsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SettingsStringsMaxAggregateInputType
}

export type GetSettingsStringsAggregateType<T extends SettingsStringsAggregateArgs> = {
      [P in keyof T & keyof AggregateSettingsStrings]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSettingsStrings[P]>
    : Prisma.GetScalarType<T[P], AggregateSettingsStrings[P]>
}




export type SettingsStringsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SettingsStringsWhereInput
  orderBy?: Prisma.SettingsStringsOrderByWithAggregationInput | Prisma.SettingsStringsOrderByWithAggregationInput[]
  by: Prisma.SettingsStringsScalarFieldEnum[] | Prisma.SettingsStringsScalarFieldEnum
  having?: Prisma.SettingsStringsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SettingsStringsCountAggregateInputType | true
  _min?: SettingsStringsMinAggregateInputType
  _max?: SettingsStringsMaxAggregateInputType
}

export type SettingsStringsGroupByOutputType = {
  key: string
  value: string
  _count: SettingsStringsCountAggregateOutputType | null
  _min: SettingsStringsMinAggregateOutputType | null
  _max: SettingsStringsMaxAggregateOutputType | null
}

type GetSettingsStringsGroupByPayload<T extends SettingsStringsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SettingsStringsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SettingsStringsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SettingsStringsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SettingsStringsGroupByOutputType[P]>
      }
    >
  >



export type SettingsStringsWhereInput = {
  AND?: Prisma.SettingsStringsWhereInput | Prisma.SettingsStringsWhereInput[]
  OR?: Prisma.SettingsStringsWhereInput[]
  NOT?: Prisma.SettingsStringsWhereInput | Prisma.SettingsStringsWhereInput[]
  key?: Prisma.StringFilter<"SettingsStrings"> | string
  value?: Prisma.StringFilter<"SettingsStrings"> | string
}

export type SettingsStringsOrderByWithRelationInput = {
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type SettingsStringsWhereUniqueInput = Prisma.AtLeast<{
  key?: string
  AND?: Prisma.SettingsStringsWhereInput | Prisma.SettingsStringsWhereInput[]
  OR?: Prisma.SettingsStringsWhereInput[]
  NOT?: Prisma.SettingsStringsWhereInput | Prisma.SettingsStringsWhereInput[]
  value?: Prisma.StringFilter<"SettingsStrings"> | string
}, "key">

export type SettingsStringsOrderByWithAggregationInput = {
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  _count?: Prisma.SettingsStringsCountOrderByAggregateInput
  _max?: Prisma.SettingsStringsMaxOrderByAggregateInput
  _min?: Prisma.SettingsStringsMinOrderByAggregateInput
}

export type SettingsStringsScalarWhereWithAggregatesInput = {
  AND?: Prisma.SettingsStringsScalarWhereWithAggregatesInput | Prisma.SettingsStringsScalarWhereWithAggregatesInput[]
  OR?: Prisma.SettingsStringsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SettingsStringsScalarWhereWithAggregatesInput | Prisma.SettingsStringsScalarWhereWithAggregatesInput[]
  key?: Prisma.StringWithAggregatesFilter<"SettingsStrings"> | string
  value?: Prisma.StringWithAggregatesFilter<"SettingsStrings"> | string
}

export type SettingsStringsCreateInput = {
  key: string
  value: string
}

export type SettingsStringsUncheckedCreateInput = {
  key: string
  value: string
}

export type SettingsStringsUpdateInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SettingsStringsUncheckedUpdateInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SettingsStringsCreateManyInput = {
  key: string
  value: string
}

export type SettingsStringsUpdateManyMutationInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SettingsStringsUncheckedUpdateManyInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SettingsStringsCountOrderByAggregateInput = {
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type SettingsStringsMaxOrderByAggregateInput = {
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type SettingsStringsMinOrderByAggregateInput = {
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
}



export type SettingsStringsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  key?: boolean
  value?: boolean
}, ExtArgs["result"]["settingsStrings"]>

export type SettingsStringsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  key?: boolean
  value?: boolean
}, ExtArgs["result"]["settingsStrings"]>

export type SettingsStringsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  key?: boolean
  value?: boolean
}, ExtArgs["result"]["settingsStrings"]>

export type SettingsStringsSelectScalar = {
  key?: boolean
  value?: boolean
}

export type SettingsStringsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"key" | "value", ExtArgs["result"]["settingsStrings"]>

export type $SettingsStringsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SettingsStrings"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    key: string
    value: string
  }, ExtArgs["result"]["settingsStrings"]>
  composites: {}
}

export type SettingsStringsGetPayload<S extends boolean | null | undefined | SettingsStringsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SettingsStringsPayload, S>

export type SettingsStringsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SettingsStringsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SettingsStringsCountAggregateInputType | true
  }

export interface SettingsStringsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SettingsStrings'], meta: { name: 'SettingsStrings' } }
  /**
   * Find zero or one SettingsStrings that matches the filter.
   * @param {SettingsStringsFindUniqueArgs} args - Arguments to find a SettingsStrings
   * @example
   * // Get one SettingsStrings
   * const settingsStrings = await prisma.settingsStrings.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SettingsStringsFindUniqueArgs>(args: Prisma.SelectSubset<T, SettingsStringsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SettingsStringsClient<runtime.Types.Result.GetResult<Prisma.$SettingsStringsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SettingsStrings that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SettingsStringsFindUniqueOrThrowArgs} args - Arguments to find a SettingsStrings
   * @example
   * // Get one SettingsStrings
   * const settingsStrings = await prisma.settingsStrings.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SettingsStringsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SettingsStringsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SettingsStringsClient<runtime.Types.Result.GetResult<Prisma.$SettingsStringsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SettingsStrings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingsStringsFindFirstArgs} args - Arguments to find a SettingsStrings
   * @example
   * // Get one SettingsStrings
   * const settingsStrings = await prisma.settingsStrings.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SettingsStringsFindFirstArgs>(args?: Prisma.SelectSubset<T, SettingsStringsFindFirstArgs<ExtArgs>>): Prisma.Prisma__SettingsStringsClient<runtime.Types.Result.GetResult<Prisma.$SettingsStringsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SettingsStrings that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingsStringsFindFirstOrThrowArgs} args - Arguments to find a SettingsStrings
   * @example
   * // Get one SettingsStrings
   * const settingsStrings = await prisma.settingsStrings.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SettingsStringsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SettingsStringsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SettingsStringsClient<runtime.Types.Result.GetResult<Prisma.$SettingsStringsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SettingsStrings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingsStringsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SettingsStrings
   * const settingsStrings = await prisma.settingsStrings.findMany()
   * 
   * // Get first 10 SettingsStrings
   * const settingsStrings = await prisma.settingsStrings.findMany({ take: 10 })
   * 
   * // Only select the `key`
   * const settingsStringsWithKeyOnly = await prisma.settingsStrings.findMany({ select: { key: true } })
   * 
   */
  findMany<T extends SettingsStringsFindManyArgs>(args?: Prisma.SelectSubset<T, SettingsStringsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SettingsStringsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SettingsStrings.
   * @param {SettingsStringsCreateArgs} args - Arguments to create a SettingsStrings.
   * @example
   * // Create one SettingsStrings
   * const SettingsStrings = await prisma.settingsStrings.create({
   *   data: {
   *     // ... data to create a SettingsStrings
   *   }
   * })
   * 
   */
  create<T extends SettingsStringsCreateArgs>(args: Prisma.SelectSubset<T, SettingsStringsCreateArgs<ExtArgs>>): Prisma.Prisma__SettingsStringsClient<runtime.Types.Result.GetResult<Prisma.$SettingsStringsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SettingsStrings.
   * @param {SettingsStringsCreateManyArgs} args - Arguments to create many SettingsStrings.
   * @example
   * // Create many SettingsStrings
   * const settingsStrings = await prisma.settingsStrings.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SettingsStringsCreateManyArgs>(args?: Prisma.SelectSubset<T, SettingsStringsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SettingsStrings and returns the data saved in the database.
   * @param {SettingsStringsCreateManyAndReturnArgs} args - Arguments to create many SettingsStrings.
   * @example
   * // Create many SettingsStrings
   * const settingsStrings = await prisma.settingsStrings.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SettingsStrings and only return the `key`
   * const settingsStringsWithKeyOnly = await prisma.settingsStrings.createManyAndReturn({
   *   select: { key: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SettingsStringsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SettingsStringsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SettingsStringsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SettingsStrings.
   * @param {SettingsStringsDeleteArgs} args - Arguments to delete one SettingsStrings.
   * @example
   * // Delete one SettingsStrings
   * const SettingsStrings = await prisma.settingsStrings.delete({
   *   where: {
   *     // ... filter to delete one SettingsStrings
   *   }
   * })
   * 
   */
  delete<T extends SettingsStringsDeleteArgs>(args: Prisma.SelectSubset<T, SettingsStringsDeleteArgs<ExtArgs>>): Prisma.Prisma__SettingsStringsClient<runtime.Types.Result.GetResult<Prisma.$SettingsStringsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SettingsStrings.
   * @param {SettingsStringsUpdateArgs} args - Arguments to update one SettingsStrings.
   * @example
   * // Update one SettingsStrings
   * const settingsStrings = await prisma.settingsStrings.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SettingsStringsUpdateArgs>(args: Prisma.SelectSubset<T, SettingsStringsUpdateArgs<ExtArgs>>): Prisma.Prisma__SettingsStringsClient<runtime.Types.Result.GetResult<Prisma.$SettingsStringsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SettingsStrings.
   * @param {SettingsStringsDeleteManyArgs} args - Arguments to filter SettingsStrings to delete.
   * @example
   * // Delete a few SettingsStrings
   * const { count } = await prisma.settingsStrings.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SettingsStringsDeleteManyArgs>(args?: Prisma.SelectSubset<T, SettingsStringsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SettingsStrings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingsStringsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SettingsStrings
   * const settingsStrings = await prisma.settingsStrings.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SettingsStringsUpdateManyArgs>(args: Prisma.SelectSubset<T, SettingsStringsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SettingsStrings and returns the data updated in the database.
   * @param {SettingsStringsUpdateManyAndReturnArgs} args - Arguments to update many SettingsStrings.
   * @example
   * // Update many SettingsStrings
   * const settingsStrings = await prisma.settingsStrings.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SettingsStrings and only return the `key`
   * const settingsStringsWithKeyOnly = await prisma.settingsStrings.updateManyAndReturn({
   *   select: { key: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SettingsStringsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SettingsStringsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SettingsStringsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SettingsStrings.
   * @param {SettingsStringsUpsertArgs} args - Arguments to update or create a SettingsStrings.
   * @example
   * // Update or create a SettingsStrings
   * const settingsStrings = await prisma.settingsStrings.upsert({
   *   create: {
   *     // ... data to create a SettingsStrings
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SettingsStrings we want to update
   *   }
   * })
   */
  upsert<T extends SettingsStringsUpsertArgs>(args: Prisma.SelectSubset<T, SettingsStringsUpsertArgs<ExtArgs>>): Prisma.Prisma__SettingsStringsClient<runtime.Types.Result.GetResult<Prisma.$SettingsStringsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SettingsStrings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingsStringsCountArgs} args - Arguments to filter SettingsStrings to count.
   * @example
   * // Count the number of SettingsStrings
   * const count = await prisma.settingsStrings.count({
   *   where: {
   *     // ... the filter for the SettingsStrings we want to count
   *   }
   * })
  **/
  count<T extends SettingsStringsCountArgs>(
    args?: Prisma.Subset<T, SettingsStringsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SettingsStringsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SettingsStrings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingsStringsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SettingsStringsAggregateArgs>(args: Prisma.Subset<T, SettingsStringsAggregateArgs>): Prisma.PrismaPromise<GetSettingsStringsAggregateType<T>>

  /**
   * Group by SettingsStrings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingsStringsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SettingsStringsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SettingsStringsGroupByArgs['orderBy'] }
      : { orderBy?: SettingsStringsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SettingsStringsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingsStringsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SettingsStrings model
 */
readonly fields: SettingsStringsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SettingsStrings.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SettingsStringsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SettingsStrings model
 */
export interface SettingsStringsFieldRefs {
  readonly key: Prisma.FieldRef<"SettingsStrings", 'String'>
  readonly value: Prisma.FieldRef<"SettingsStrings", 'String'>
}
    

// Custom InputTypes
/**
 * SettingsStrings findUnique
 */
export type SettingsStringsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SettingsStrings
   */
  select?: Prisma.SettingsStringsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SettingsStrings
   */
  omit?: Prisma.SettingsStringsOmit<ExtArgs> | null
  /**
   * Filter, which SettingsStrings to fetch.
   */
  where: Prisma.SettingsStringsWhereUniqueInput
}

/**
 * SettingsStrings findUniqueOrThrow
 */
export type SettingsStringsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SettingsStrings
   */
  select?: Prisma.SettingsStringsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SettingsStrings
   */
  omit?: Prisma.SettingsStringsOmit<ExtArgs> | null
  /**
   * Filter, which SettingsStrings to fetch.
   */
  where: Prisma.SettingsStringsWhereUniqueInput
}

/**
 * SettingsStrings findFirst
 */
export type SettingsStringsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SettingsStrings
   */
  select?: Prisma.SettingsStringsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SettingsStrings
   */
  omit?: Prisma.SettingsStringsOmit<ExtArgs> | null
  /**
   * Filter, which SettingsStrings to fetch.
   */
  where?: Prisma.SettingsStringsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SettingsStrings to fetch.
   */
  orderBy?: Prisma.SettingsStringsOrderByWithRelationInput | Prisma.SettingsStringsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SettingsStrings.
   */
  cursor?: Prisma.SettingsStringsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SettingsStrings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SettingsStrings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SettingsStrings.
   */
  distinct?: Prisma.SettingsStringsScalarFieldEnum | Prisma.SettingsStringsScalarFieldEnum[]
}

/**
 * SettingsStrings findFirstOrThrow
 */
export type SettingsStringsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SettingsStrings
   */
  select?: Prisma.SettingsStringsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SettingsStrings
   */
  omit?: Prisma.SettingsStringsOmit<ExtArgs> | null
  /**
   * Filter, which SettingsStrings to fetch.
   */
  where?: Prisma.SettingsStringsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SettingsStrings to fetch.
   */
  orderBy?: Prisma.SettingsStringsOrderByWithRelationInput | Prisma.SettingsStringsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SettingsStrings.
   */
  cursor?: Prisma.SettingsStringsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SettingsStrings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SettingsStrings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SettingsStrings.
   */
  distinct?: Prisma.SettingsStringsScalarFieldEnum | Prisma.SettingsStringsScalarFieldEnum[]
}

/**
 * SettingsStrings findMany
 */
export type SettingsStringsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SettingsStrings
   */
  select?: Prisma.SettingsStringsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SettingsStrings
   */
  omit?: Prisma.SettingsStringsOmit<ExtArgs> | null
  /**
   * Filter, which SettingsStrings to fetch.
   */
  where?: Prisma.SettingsStringsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SettingsStrings to fetch.
   */
  orderBy?: Prisma.SettingsStringsOrderByWithRelationInput | Prisma.SettingsStringsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SettingsStrings.
   */
  cursor?: Prisma.SettingsStringsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SettingsStrings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SettingsStrings.
   */
  skip?: number
  distinct?: Prisma.SettingsStringsScalarFieldEnum | Prisma.SettingsStringsScalarFieldEnum[]
}

/**
 * SettingsStrings create
 */
export type SettingsStringsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SettingsStrings
   */
  select?: Prisma.SettingsStringsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SettingsStrings
   */
  omit?: Prisma.SettingsStringsOmit<ExtArgs> | null
  /**
   * The data needed to create a SettingsStrings.
   */
  data: Prisma.XOR<Prisma.SettingsStringsCreateInput, Prisma.SettingsStringsUncheckedCreateInput>
}

/**
 * SettingsStrings createMany
 */
export type SettingsStringsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SettingsStrings.
   */
  data: Prisma.SettingsStringsCreateManyInput | Prisma.SettingsStringsCreateManyInput[]
}

/**
 * SettingsStrings createManyAndReturn
 */
export type SettingsStringsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SettingsStrings
   */
  select?: Prisma.SettingsStringsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SettingsStrings
   */
  omit?: Prisma.SettingsStringsOmit<ExtArgs> | null
  /**
   * The data used to create many SettingsStrings.
   */
  data: Prisma.SettingsStringsCreateManyInput | Prisma.SettingsStringsCreateManyInput[]
}

/**
 * SettingsStrings update
 */
export type SettingsStringsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SettingsStrings
   */
  select?: Prisma.SettingsStringsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SettingsStrings
   */
  omit?: Prisma.SettingsStringsOmit<ExtArgs> | null
  /**
   * The data needed to update a SettingsStrings.
   */
  data: Prisma.XOR<Prisma.SettingsStringsUpdateInput, Prisma.SettingsStringsUncheckedUpdateInput>
  /**
   * Choose, which SettingsStrings to update.
   */
  where: Prisma.SettingsStringsWhereUniqueInput
}

/**
 * SettingsStrings updateMany
 */
export type SettingsStringsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SettingsStrings.
   */
  data: Prisma.XOR<Prisma.SettingsStringsUpdateManyMutationInput, Prisma.SettingsStringsUncheckedUpdateManyInput>
  /**
   * Filter which SettingsStrings to update
   */
  where?: Prisma.SettingsStringsWhereInput
  /**
   * Limit how many SettingsStrings to update.
   */
  limit?: number
}

/**
 * SettingsStrings updateManyAndReturn
 */
export type SettingsStringsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SettingsStrings
   */
  select?: Prisma.SettingsStringsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SettingsStrings
   */
  omit?: Prisma.SettingsStringsOmit<ExtArgs> | null
  /**
   * The data used to update SettingsStrings.
   */
  data: Prisma.XOR<Prisma.SettingsStringsUpdateManyMutationInput, Prisma.SettingsStringsUncheckedUpdateManyInput>
  /**
   * Filter which SettingsStrings to update
   */
  where?: Prisma.SettingsStringsWhereInput
  /**
   * Limit how many SettingsStrings to update.
   */
  limit?: number
}

/**
 * SettingsStrings upsert
 */
export type SettingsStringsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SettingsStrings
   */
  select?: Prisma.SettingsStringsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SettingsStrings
   */
  omit?: Prisma.SettingsStringsOmit<ExtArgs> | null
  /**
   * The filter to search for the SettingsStrings to update in case it exists.
   */
  where: Prisma.SettingsStringsWhereUniqueInput
  /**
   * In case the SettingsStrings found by the `where` argument doesn't exist, create a new SettingsStrings with this data.
   */
  create: Prisma.XOR<Prisma.SettingsStringsCreateInput, Prisma.SettingsStringsUncheckedCreateInput>
  /**
   * In case the SettingsStrings was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SettingsStringsUpdateInput, Prisma.SettingsStringsUncheckedUpdateInput>
}

/**
 * SettingsStrings delete
 */
export type SettingsStringsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SettingsStrings
   */
  select?: Prisma.SettingsStringsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SettingsStrings
   */
  omit?: Prisma.SettingsStringsOmit<ExtArgs> | null
  /**
   * Filter which SettingsStrings to delete.
   */
  where: Prisma.SettingsStringsWhereUniqueInput
}

/**
 * SettingsStrings deleteMany
 */
export type SettingsStringsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SettingsStrings to delete
   */
  where?: Prisma.SettingsStringsWhereInput
  /**
   * Limit how many SettingsStrings to delete.
   */
  limit?: number
}

/**
 * SettingsStrings without action
 */
export type SettingsStringsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SettingsStrings
   */
  select?: Prisma.SettingsStringsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SettingsStrings
   */
  omit?: Prisma.SettingsStringsOmit<ExtArgs> | null
}
