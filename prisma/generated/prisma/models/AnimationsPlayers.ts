/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `AnimationsPlayers` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums.js";
import type * as Prisma from "../internal/prismaNamespace.js";

/**
 * Model AnimationsPlayers
 *
 */
export type AnimationsPlayersModel =
  runtime.Types.Result.DefaultSelection<Prisma.$AnimationsPlayersPayload>;

export type AggregateAnimationsPlayers = {
  _count: AnimationsPlayersCountAggregateOutputType | null;
  _avg: AnimationsPlayersAvgAggregateOutputType | null;
  _sum: AnimationsPlayersSumAggregateOutputType | null;
  _min: AnimationsPlayersMinAggregateOutputType | null;
  _max: AnimationsPlayersMaxAggregateOutputType | null;
};

export type AnimationsPlayersAvgAggregateOutputType = {
  playerId: number | null;
  animationId: number | null;
  score: number | null;
};

export type AnimationsPlayersSumAggregateOutputType = {
  playerId: number | null;
  animationId: number | null;
  score: number | null;
};

export type AnimationsPlayersMinAggregateOutputType = {
  playerId: number | null;
  animationId: number | null;
  score: number | null;
};

export type AnimationsPlayersMaxAggregateOutputType = {
  playerId: number | null;
  animationId: number | null;
  score: number | null;
};

export type AnimationsPlayersCountAggregateOutputType = {
  playerId: number;
  animationId: number;
  score: number;
  _all: number;
};

export type AnimationsPlayersAvgAggregateInputType = {
  playerId?: true;
  animationId?: true;
  score?: true;
};

export type AnimationsPlayersSumAggregateInputType = {
  playerId?: true;
  animationId?: true;
  score?: true;
};

export type AnimationsPlayersMinAggregateInputType = {
  playerId?: true;
  animationId?: true;
  score?: true;
};

export type AnimationsPlayersMaxAggregateInputType = {
  playerId?: true;
  animationId?: true;
  score?: true;
};

export type AnimationsPlayersCountAggregateInputType = {
  playerId?: true;
  animationId?: true;
  score?: true;
  _all?: true;
};

export type AnimationsPlayersAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AnimationsPlayers to aggregate.
   */
  where?: Prisma.AnimationsPlayersWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AnimationsPlayers to fetch.
   */
  orderBy?:
    | Prisma.AnimationsPlayersOrderByWithRelationInput
    | Prisma.AnimationsPlayersOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AnimationsPlayersWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AnimationsPlayers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AnimationsPlayers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AnimationsPlayers
   **/
  _count?: true | AnimationsPlayersCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: AnimationsPlayersAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: AnimationsPlayersSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AnimationsPlayersMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AnimationsPlayersMaxAggregateInputType;
};

export type GetAnimationsPlayersAggregateType<
  T extends AnimationsPlayersAggregateArgs,
> = {
  [P in keyof T & keyof AggregateAnimationsPlayers]: P extends
    | "_count"
    | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAnimationsPlayers[P]>
    : Prisma.GetScalarType<T[P], AggregateAnimationsPlayers[P]>;
};

export type AnimationsPlayersGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AnimationsPlayersWhereInput;
  orderBy?:
    | Prisma.AnimationsPlayersOrderByWithAggregationInput
    | Prisma.AnimationsPlayersOrderByWithAggregationInput[];
  by:
    | Prisma.AnimationsPlayersScalarFieldEnum[]
    | Prisma.AnimationsPlayersScalarFieldEnum;
  having?: Prisma.AnimationsPlayersScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AnimationsPlayersCountAggregateInputType | true;
  _avg?: AnimationsPlayersAvgAggregateInputType;
  _sum?: AnimationsPlayersSumAggregateInputType;
  _min?: AnimationsPlayersMinAggregateInputType;
  _max?: AnimationsPlayersMaxAggregateInputType;
};

export type AnimationsPlayersGroupByOutputType = {
  playerId: number;
  animationId: number;
  score: number | null;
  _count: AnimationsPlayersCountAggregateOutputType | null;
  _avg: AnimationsPlayersAvgAggregateOutputType | null;
  _sum: AnimationsPlayersSumAggregateOutputType | null;
  _min: AnimationsPlayersMinAggregateOutputType | null;
  _max: AnimationsPlayersMaxAggregateOutputType | null;
};

type GetAnimationsPlayersGroupByPayload<
  T extends AnimationsPlayersGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AnimationsPlayersGroupByOutputType, T["by"]> & {
      [P in keyof T &
        keyof AnimationsPlayersGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], AnimationsPlayersGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], AnimationsPlayersGroupByOutputType[P]>;
    }
  >
>;

export type AnimationsPlayersWhereInput = {
  AND?:
    | Prisma.AnimationsPlayersWhereInput
    | Prisma.AnimationsPlayersWhereInput[];
  OR?: Prisma.AnimationsPlayersWhereInput[];
  NOT?:
    | Prisma.AnimationsPlayersWhereInput
    | Prisma.AnimationsPlayersWhereInput[];
  playerId?: Prisma.IntFilter<"AnimationsPlayers"> | number;
  animationId?: Prisma.IntFilter<"AnimationsPlayers"> | number;
  score?: Prisma.IntNullableFilter<"AnimationsPlayers"> | number | null;
  player?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  animation?: Prisma.XOR<
    Prisma.AnimationScalarRelationFilter,
    Prisma.AnimationWhereInput
  >;
};

export type AnimationsPlayersOrderByWithRelationInput = {
  playerId?: Prisma.SortOrder;
  animationId?: Prisma.SortOrder;
  score?: Prisma.SortOrderInput | Prisma.SortOrder;
  player?: Prisma.UserOrderByWithRelationInput;
  animation?: Prisma.AnimationOrderByWithRelationInput;
};

export type AnimationsPlayersWhereUniqueInput = Prisma.AtLeast<
  {
    playerId_animationId?: Prisma.AnimationsPlayersPlayerIdAnimationIdCompoundUniqueInput;
    AND?:
      | Prisma.AnimationsPlayersWhereInput
      | Prisma.AnimationsPlayersWhereInput[];
    OR?: Prisma.AnimationsPlayersWhereInput[];
    NOT?:
      | Prisma.AnimationsPlayersWhereInput
      | Prisma.AnimationsPlayersWhereInput[];
    playerId?: Prisma.IntFilter<"AnimationsPlayers"> | number;
    animationId?: Prisma.IntFilter<"AnimationsPlayers"> | number;
    score?: Prisma.IntNullableFilter<"AnimationsPlayers"> | number | null;
    player?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    animation?: Prisma.XOR<
      Prisma.AnimationScalarRelationFilter,
      Prisma.AnimationWhereInput
    >;
  },
  "playerId_animationId"
>;

export type AnimationsPlayersOrderByWithAggregationInput = {
  playerId?: Prisma.SortOrder;
  animationId?: Prisma.SortOrder;
  score?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.AnimationsPlayersCountOrderByAggregateInput;
  _avg?: Prisma.AnimationsPlayersAvgOrderByAggregateInput;
  _max?: Prisma.AnimationsPlayersMaxOrderByAggregateInput;
  _min?: Prisma.AnimationsPlayersMinOrderByAggregateInput;
  _sum?: Prisma.AnimationsPlayersSumOrderByAggregateInput;
};

export type AnimationsPlayersScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AnimationsPlayersScalarWhereWithAggregatesInput
    | Prisma.AnimationsPlayersScalarWhereWithAggregatesInput[];
  OR?: Prisma.AnimationsPlayersScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AnimationsPlayersScalarWhereWithAggregatesInput
    | Prisma.AnimationsPlayersScalarWhereWithAggregatesInput[];
  playerId?: Prisma.IntWithAggregatesFilter<"AnimationsPlayers"> | number;
  animationId?: Prisma.IntWithAggregatesFilter<"AnimationsPlayers"> | number;
  score?:
    | Prisma.IntNullableWithAggregatesFilter<"AnimationsPlayers">
    | number
    | null;
};

export type AnimationsPlayersCreateInput = {
  score?: number | null;
  player: Prisma.UserCreateNestedOneWithoutAnimationsAsPlayerInput;
  animation: Prisma.AnimationCreateNestedOneWithoutPlayersInput;
};

export type AnimationsPlayersUncheckedCreateInput = {
  playerId: number;
  animationId: number;
  score?: number | null;
};

export type AnimationsPlayersUpdateInput = {
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  player?: Prisma.UserUpdateOneRequiredWithoutAnimationsAsPlayerNestedInput;
  animation?: Prisma.AnimationUpdateOneRequiredWithoutPlayersNestedInput;
};

export type AnimationsPlayersUncheckedUpdateInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number;
  animationId?: Prisma.IntFieldUpdateOperationsInput | number;
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AnimationsPlayersCreateManyInput = {
  playerId: number;
  animationId: number;
  score?: number | null;
};

export type AnimationsPlayersUpdateManyMutationInput = {
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AnimationsPlayersUncheckedUpdateManyInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number;
  animationId?: Prisma.IntFieldUpdateOperationsInput | number;
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AnimationsPlayersListRelationFilter = {
  every?: Prisma.AnimationsPlayersWhereInput;
  some?: Prisma.AnimationsPlayersWhereInput;
  none?: Prisma.AnimationsPlayersWhereInput;
};

export type AnimationsPlayersOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type AnimationsPlayersPlayerIdAnimationIdCompoundUniqueInput = {
  playerId: number;
  animationId: number;
};

export type AnimationsPlayersCountOrderByAggregateInput = {
  playerId?: Prisma.SortOrder;
  animationId?: Prisma.SortOrder;
  score?: Prisma.SortOrder;
};

export type AnimationsPlayersAvgOrderByAggregateInput = {
  playerId?: Prisma.SortOrder;
  animationId?: Prisma.SortOrder;
  score?: Prisma.SortOrder;
};

export type AnimationsPlayersMaxOrderByAggregateInput = {
  playerId?: Prisma.SortOrder;
  animationId?: Prisma.SortOrder;
  score?: Prisma.SortOrder;
};

export type AnimationsPlayersMinOrderByAggregateInput = {
  playerId?: Prisma.SortOrder;
  animationId?: Prisma.SortOrder;
  score?: Prisma.SortOrder;
};

export type AnimationsPlayersSumOrderByAggregateInput = {
  playerId?: Prisma.SortOrder;
  animationId?: Prisma.SortOrder;
  score?: Prisma.SortOrder;
};

export type AnimationsPlayersCreateNestedManyWithoutPlayerInput = {
  create?:
    | Prisma.XOR<
        Prisma.AnimationsPlayersCreateWithoutPlayerInput,
        Prisma.AnimationsPlayersUncheckedCreateWithoutPlayerInput
      >
    | Prisma.AnimationsPlayersCreateWithoutPlayerInput[]
    | Prisma.AnimationsPlayersUncheckedCreateWithoutPlayerInput[];
  connectOrCreate?:
    | Prisma.AnimationsPlayersCreateOrConnectWithoutPlayerInput
    | Prisma.AnimationsPlayersCreateOrConnectWithoutPlayerInput[];
  createMany?: Prisma.AnimationsPlayersCreateManyPlayerInputEnvelope;
  connect?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
};

export type AnimationsPlayersUncheckedCreateNestedManyWithoutPlayerInput = {
  create?:
    | Prisma.XOR<
        Prisma.AnimationsPlayersCreateWithoutPlayerInput,
        Prisma.AnimationsPlayersUncheckedCreateWithoutPlayerInput
      >
    | Prisma.AnimationsPlayersCreateWithoutPlayerInput[]
    | Prisma.AnimationsPlayersUncheckedCreateWithoutPlayerInput[];
  connectOrCreate?:
    | Prisma.AnimationsPlayersCreateOrConnectWithoutPlayerInput
    | Prisma.AnimationsPlayersCreateOrConnectWithoutPlayerInput[];
  createMany?: Prisma.AnimationsPlayersCreateManyPlayerInputEnvelope;
  connect?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
};

export type AnimationsPlayersUpdateManyWithoutPlayerNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AnimationsPlayersCreateWithoutPlayerInput,
        Prisma.AnimationsPlayersUncheckedCreateWithoutPlayerInput
      >
    | Prisma.AnimationsPlayersCreateWithoutPlayerInput[]
    | Prisma.AnimationsPlayersUncheckedCreateWithoutPlayerInput[];
  connectOrCreate?:
    | Prisma.AnimationsPlayersCreateOrConnectWithoutPlayerInput
    | Prisma.AnimationsPlayersCreateOrConnectWithoutPlayerInput[];
  upsert?:
    | Prisma.AnimationsPlayersUpsertWithWhereUniqueWithoutPlayerInput
    | Prisma.AnimationsPlayersUpsertWithWhereUniqueWithoutPlayerInput[];
  createMany?: Prisma.AnimationsPlayersCreateManyPlayerInputEnvelope;
  set?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
  disconnect?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
  delete?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
  connect?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
  update?:
    | Prisma.AnimationsPlayersUpdateWithWhereUniqueWithoutPlayerInput
    | Prisma.AnimationsPlayersUpdateWithWhereUniqueWithoutPlayerInput[];
  updateMany?:
    | Prisma.AnimationsPlayersUpdateManyWithWhereWithoutPlayerInput
    | Prisma.AnimationsPlayersUpdateManyWithWhereWithoutPlayerInput[];
  deleteMany?:
    | Prisma.AnimationsPlayersScalarWhereInput
    | Prisma.AnimationsPlayersScalarWhereInput[];
};

export type AnimationsPlayersUncheckedUpdateManyWithoutPlayerNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AnimationsPlayersCreateWithoutPlayerInput,
        Prisma.AnimationsPlayersUncheckedCreateWithoutPlayerInput
      >
    | Prisma.AnimationsPlayersCreateWithoutPlayerInput[]
    | Prisma.AnimationsPlayersUncheckedCreateWithoutPlayerInput[];
  connectOrCreate?:
    | Prisma.AnimationsPlayersCreateOrConnectWithoutPlayerInput
    | Prisma.AnimationsPlayersCreateOrConnectWithoutPlayerInput[];
  upsert?:
    | Prisma.AnimationsPlayersUpsertWithWhereUniqueWithoutPlayerInput
    | Prisma.AnimationsPlayersUpsertWithWhereUniqueWithoutPlayerInput[];
  createMany?: Prisma.AnimationsPlayersCreateManyPlayerInputEnvelope;
  set?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
  disconnect?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
  delete?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
  connect?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
  update?:
    | Prisma.AnimationsPlayersUpdateWithWhereUniqueWithoutPlayerInput
    | Prisma.AnimationsPlayersUpdateWithWhereUniqueWithoutPlayerInput[];
  updateMany?:
    | Prisma.AnimationsPlayersUpdateManyWithWhereWithoutPlayerInput
    | Prisma.AnimationsPlayersUpdateManyWithWhereWithoutPlayerInput[];
  deleteMany?:
    | Prisma.AnimationsPlayersScalarWhereInput
    | Prisma.AnimationsPlayersScalarWhereInput[];
};

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null;
  increment?: number;
  decrement?: number;
  multiply?: number;
  divide?: number;
};

export type AnimationsPlayersCreateNestedManyWithoutAnimationInput = {
  create?:
    | Prisma.XOR<
        Prisma.AnimationsPlayersCreateWithoutAnimationInput,
        Prisma.AnimationsPlayersUncheckedCreateWithoutAnimationInput
      >
    | Prisma.AnimationsPlayersCreateWithoutAnimationInput[]
    | Prisma.AnimationsPlayersUncheckedCreateWithoutAnimationInput[];
  connectOrCreate?:
    | Prisma.AnimationsPlayersCreateOrConnectWithoutAnimationInput
    | Prisma.AnimationsPlayersCreateOrConnectWithoutAnimationInput[];
  createMany?: Prisma.AnimationsPlayersCreateManyAnimationInputEnvelope;
  connect?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
};

export type AnimationsPlayersUncheckedCreateNestedManyWithoutAnimationInput = {
  create?:
    | Prisma.XOR<
        Prisma.AnimationsPlayersCreateWithoutAnimationInput,
        Prisma.AnimationsPlayersUncheckedCreateWithoutAnimationInput
      >
    | Prisma.AnimationsPlayersCreateWithoutAnimationInput[]
    | Prisma.AnimationsPlayersUncheckedCreateWithoutAnimationInput[];
  connectOrCreate?:
    | Prisma.AnimationsPlayersCreateOrConnectWithoutAnimationInput
    | Prisma.AnimationsPlayersCreateOrConnectWithoutAnimationInput[];
  createMany?: Prisma.AnimationsPlayersCreateManyAnimationInputEnvelope;
  connect?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
};

export type AnimationsPlayersUpdateManyWithoutAnimationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AnimationsPlayersCreateWithoutAnimationInput,
        Prisma.AnimationsPlayersUncheckedCreateWithoutAnimationInput
      >
    | Prisma.AnimationsPlayersCreateWithoutAnimationInput[]
    | Prisma.AnimationsPlayersUncheckedCreateWithoutAnimationInput[];
  connectOrCreate?:
    | Prisma.AnimationsPlayersCreateOrConnectWithoutAnimationInput
    | Prisma.AnimationsPlayersCreateOrConnectWithoutAnimationInput[];
  upsert?:
    | Prisma.AnimationsPlayersUpsertWithWhereUniqueWithoutAnimationInput
    | Prisma.AnimationsPlayersUpsertWithWhereUniqueWithoutAnimationInput[];
  createMany?: Prisma.AnimationsPlayersCreateManyAnimationInputEnvelope;
  set?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
  disconnect?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
  delete?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
  connect?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
  update?:
    | Prisma.AnimationsPlayersUpdateWithWhereUniqueWithoutAnimationInput
    | Prisma.AnimationsPlayersUpdateWithWhereUniqueWithoutAnimationInput[];
  updateMany?:
    | Prisma.AnimationsPlayersUpdateManyWithWhereWithoutAnimationInput
    | Prisma.AnimationsPlayersUpdateManyWithWhereWithoutAnimationInput[];
  deleteMany?:
    | Prisma.AnimationsPlayersScalarWhereInput
    | Prisma.AnimationsPlayersScalarWhereInput[];
};

export type AnimationsPlayersUncheckedUpdateManyWithoutAnimationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AnimationsPlayersCreateWithoutAnimationInput,
        Prisma.AnimationsPlayersUncheckedCreateWithoutAnimationInput
      >
    | Prisma.AnimationsPlayersCreateWithoutAnimationInput[]
    | Prisma.AnimationsPlayersUncheckedCreateWithoutAnimationInput[];
  connectOrCreate?:
    | Prisma.AnimationsPlayersCreateOrConnectWithoutAnimationInput
    | Prisma.AnimationsPlayersCreateOrConnectWithoutAnimationInput[];
  upsert?:
    | Prisma.AnimationsPlayersUpsertWithWhereUniqueWithoutAnimationInput
    | Prisma.AnimationsPlayersUpsertWithWhereUniqueWithoutAnimationInput[];
  createMany?: Prisma.AnimationsPlayersCreateManyAnimationInputEnvelope;
  set?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
  disconnect?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
  delete?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
  connect?:
    | Prisma.AnimationsPlayersWhereUniqueInput
    | Prisma.AnimationsPlayersWhereUniqueInput[];
  update?:
    | Prisma.AnimationsPlayersUpdateWithWhereUniqueWithoutAnimationInput
    | Prisma.AnimationsPlayersUpdateWithWhereUniqueWithoutAnimationInput[];
  updateMany?:
    | Prisma.AnimationsPlayersUpdateManyWithWhereWithoutAnimationInput
    | Prisma.AnimationsPlayersUpdateManyWithWhereWithoutAnimationInput[];
  deleteMany?:
    | Prisma.AnimationsPlayersScalarWhereInput
    | Prisma.AnimationsPlayersScalarWhereInput[];
};

export type AnimationsPlayersCreateWithoutPlayerInput = {
  score?: number | null;
  animation: Prisma.AnimationCreateNestedOneWithoutPlayersInput;
};

export type AnimationsPlayersUncheckedCreateWithoutPlayerInput = {
  animationId: number;
  score?: number | null;
};

export type AnimationsPlayersCreateOrConnectWithoutPlayerInput = {
  where: Prisma.AnimationsPlayersWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AnimationsPlayersCreateWithoutPlayerInput,
    Prisma.AnimationsPlayersUncheckedCreateWithoutPlayerInput
  >;
};

export type AnimationsPlayersCreateManyPlayerInputEnvelope = {
  data:
    | Prisma.AnimationsPlayersCreateManyPlayerInput
    | Prisma.AnimationsPlayersCreateManyPlayerInput[];
};

export type AnimationsPlayersUpsertWithWhereUniqueWithoutPlayerInput = {
  where: Prisma.AnimationsPlayersWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AnimationsPlayersUpdateWithoutPlayerInput,
    Prisma.AnimationsPlayersUncheckedUpdateWithoutPlayerInput
  >;
  create: Prisma.XOR<
    Prisma.AnimationsPlayersCreateWithoutPlayerInput,
    Prisma.AnimationsPlayersUncheckedCreateWithoutPlayerInput
  >;
};

export type AnimationsPlayersUpdateWithWhereUniqueWithoutPlayerInput = {
  where: Prisma.AnimationsPlayersWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AnimationsPlayersUpdateWithoutPlayerInput,
    Prisma.AnimationsPlayersUncheckedUpdateWithoutPlayerInput
  >;
};

export type AnimationsPlayersUpdateManyWithWhereWithoutPlayerInput = {
  where: Prisma.AnimationsPlayersScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AnimationsPlayersUpdateManyMutationInput,
    Prisma.AnimationsPlayersUncheckedUpdateManyWithoutPlayerInput
  >;
};

export type AnimationsPlayersScalarWhereInput = {
  AND?:
    | Prisma.AnimationsPlayersScalarWhereInput
    | Prisma.AnimationsPlayersScalarWhereInput[];
  OR?: Prisma.AnimationsPlayersScalarWhereInput[];
  NOT?:
    | Prisma.AnimationsPlayersScalarWhereInput
    | Prisma.AnimationsPlayersScalarWhereInput[];
  playerId?: Prisma.IntFilter<"AnimationsPlayers"> | number;
  animationId?: Prisma.IntFilter<"AnimationsPlayers"> | number;
  score?: Prisma.IntNullableFilter<"AnimationsPlayers"> | number | null;
};

export type AnimationsPlayersCreateWithoutAnimationInput = {
  score?: number | null;
  player: Prisma.UserCreateNestedOneWithoutAnimationsAsPlayerInput;
};

export type AnimationsPlayersUncheckedCreateWithoutAnimationInput = {
  playerId: number;
  score?: number | null;
};

export type AnimationsPlayersCreateOrConnectWithoutAnimationInput = {
  where: Prisma.AnimationsPlayersWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AnimationsPlayersCreateWithoutAnimationInput,
    Prisma.AnimationsPlayersUncheckedCreateWithoutAnimationInput
  >;
};

export type AnimationsPlayersCreateManyAnimationInputEnvelope = {
  data:
    | Prisma.AnimationsPlayersCreateManyAnimationInput
    | Prisma.AnimationsPlayersCreateManyAnimationInput[];
};

export type AnimationsPlayersUpsertWithWhereUniqueWithoutAnimationInput = {
  where: Prisma.AnimationsPlayersWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AnimationsPlayersUpdateWithoutAnimationInput,
    Prisma.AnimationsPlayersUncheckedUpdateWithoutAnimationInput
  >;
  create: Prisma.XOR<
    Prisma.AnimationsPlayersCreateWithoutAnimationInput,
    Prisma.AnimationsPlayersUncheckedCreateWithoutAnimationInput
  >;
};

export type AnimationsPlayersUpdateWithWhereUniqueWithoutAnimationInput = {
  where: Prisma.AnimationsPlayersWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AnimationsPlayersUpdateWithoutAnimationInput,
    Prisma.AnimationsPlayersUncheckedUpdateWithoutAnimationInput
  >;
};

export type AnimationsPlayersUpdateManyWithWhereWithoutAnimationInput = {
  where: Prisma.AnimationsPlayersScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AnimationsPlayersUpdateManyMutationInput,
    Prisma.AnimationsPlayersUncheckedUpdateManyWithoutAnimationInput
  >;
};

export type AnimationsPlayersCreateManyPlayerInput = {
  animationId: number;
  score?: number | null;
};

export type AnimationsPlayersUpdateWithoutPlayerInput = {
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  animation?: Prisma.AnimationUpdateOneRequiredWithoutPlayersNestedInput;
};

export type AnimationsPlayersUncheckedUpdateWithoutPlayerInput = {
  animationId?: Prisma.IntFieldUpdateOperationsInput | number;
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AnimationsPlayersUncheckedUpdateManyWithoutPlayerInput = {
  animationId?: Prisma.IntFieldUpdateOperationsInput | number;
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AnimationsPlayersCreateManyAnimationInput = {
  playerId: number;
  score?: number | null;
};

export type AnimationsPlayersUpdateWithoutAnimationInput = {
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  player?: Prisma.UserUpdateOneRequiredWithoutAnimationsAsPlayerNestedInput;
};

export type AnimationsPlayersUncheckedUpdateWithoutAnimationInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number;
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AnimationsPlayersUncheckedUpdateManyWithoutAnimationInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number;
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AnimationsPlayersSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    playerId?: boolean;
    animationId?: boolean;
    score?: boolean;
    player?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    animation?: boolean | Prisma.AnimationDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["animationsPlayers"]
>;

export type AnimationsPlayersSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    playerId?: boolean;
    animationId?: boolean;
    score?: boolean;
    player?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    animation?: boolean | Prisma.AnimationDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["animationsPlayers"]
>;

export type AnimationsPlayersSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    playerId?: boolean;
    animationId?: boolean;
    score?: boolean;
    player?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    animation?: boolean | Prisma.AnimationDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["animationsPlayers"]
>;

export type AnimationsPlayersSelectScalar = {
  playerId?: boolean;
  animationId?: boolean;
  score?: boolean;
};

export type AnimationsPlayersOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "playerId" | "animationId" | "score",
  ExtArgs["result"]["animationsPlayers"]
>;
export type AnimationsPlayersInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  player?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  animation?: boolean | Prisma.AnimationDefaultArgs<ExtArgs>;
};
export type AnimationsPlayersIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  player?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  animation?: boolean | Prisma.AnimationDefaultArgs<ExtArgs>;
};
export type AnimationsPlayersIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  player?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  animation?: boolean | Prisma.AnimationDefaultArgs<ExtArgs>;
};

export type $AnimationsPlayersPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "AnimationsPlayers";
  objects: {
    player: Prisma.$UserPayload<ExtArgs>;
    animation: Prisma.$AnimationPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      playerId: number;
      animationId: number;
      score: number | null;
    },
    ExtArgs["result"]["animationsPlayers"]
  >;
  composites: {};
};

export type AnimationsPlayersGetPayload<
  S extends boolean | null | undefined | AnimationsPlayersDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$AnimationsPlayersPayload, S>;

export type AnimationsPlayersCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  AnimationsPlayersFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: AnimationsPlayersCountAggregateInputType | true;
};

export interface AnimationsPlayersDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["AnimationsPlayers"];
    meta: { name: "AnimationsPlayers" };
  };
  /**
   * Find zero or one AnimationsPlayers that matches the filter.
   * @param {AnimationsPlayersFindUniqueArgs} args - Arguments to find a AnimationsPlayers
   * @example
   * // Get one AnimationsPlayers
   * const animationsPlayers = await prisma.animationsPlayers.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AnimationsPlayersFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AnimationsPlayersFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__AnimationsPlayersClient<
    runtime.Types.Result.GetResult<
      Prisma.$AnimationsPlayersPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AnimationsPlayers that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AnimationsPlayersFindUniqueOrThrowArgs} args - Arguments to find a AnimationsPlayers
   * @example
   * // Get one AnimationsPlayers
   * const animationsPlayers = await prisma.animationsPlayers.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AnimationsPlayersFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      AnimationsPlayersFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__AnimationsPlayersClient<
    runtime.Types.Result.GetResult<
      Prisma.$AnimationsPlayersPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AnimationsPlayers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnimationsPlayersFindFirstArgs} args - Arguments to find a AnimationsPlayers
   * @example
   * // Get one AnimationsPlayers
   * const animationsPlayers = await prisma.animationsPlayers.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AnimationsPlayersFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AnimationsPlayersFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__AnimationsPlayersClient<
    runtime.Types.Result.GetResult<
      Prisma.$AnimationsPlayersPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AnimationsPlayers that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnimationsPlayersFindFirstOrThrowArgs} args - Arguments to find a AnimationsPlayers
   * @example
   * // Get one AnimationsPlayers
   * const animationsPlayers = await prisma.animationsPlayers.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AnimationsPlayersFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      AnimationsPlayersFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__AnimationsPlayersClient<
    runtime.Types.Result.GetResult<
      Prisma.$AnimationsPlayersPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AnimationsPlayers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnimationsPlayersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AnimationsPlayers
   * const animationsPlayers = await prisma.animationsPlayers.findMany()
   *
   * // Get first 10 AnimationsPlayers
   * const animationsPlayers = await prisma.animationsPlayers.findMany({ take: 10 })
   *
   * // Only select the `playerId`
   * const animationsPlayersWithPlayerIdOnly = await prisma.animationsPlayers.findMany({ select: { playerId: true } })
   *
   */
  findMany<T extends AnimationsPlayersFindManyArgs>(
    args?: Prisma.SelectSubset<T, AnimationsPlayersFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AnimationsPlayersPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a AnimationsPlayers.
   * @param {AnimationsPlayersCreateArgs} args - Arguments to create a AnimationsPlayers.
   * @example
   * // Create one AnimationsPlayers
   * const AnimationsPlayers = await prisma.animationsPlayers.create({
   *   data: {
   *     // ... data to create a AnimationsPlayers
   *   }
   * })
   *
   */
  create<T extends AnimationsPlayersCreateArgs>(
    args: Prisma.SelectSubset<T, AnimationsPlayersCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__AnimationsPlayersClient<
    runtime.Types.Result.GetResult<
      Prisma.$AnimationsPlayersPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AnimationsPlayers.
   * @param {AnimationsPlayersCreateManyArgs} args - Arguments to create many AnimationsPlayers.
   * @example
   * // Create many AnimationsPlayers
   * const animationsPlayers = await prisma.animationsPlayers.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AnimationsPlayersCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AnimationsPlayersCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AnimationsPlayers and returns the data saved in the database.
   * @param {AnimationsPlayersCreateManyAndReturnArgs} args - Arguments to create many AnimationsPlayers.
   * @example
   * // Create many AnimationsPlayers
   * const animationsPlayers = await prisma.animationsPlayers.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AnimationsPlayers and only return the `playerId`
   * const animationsPlayersWithPlayerIdOnly = await prisma.animationsPlayers.createManyAndReturn({
   *   select: { playerId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AnimationsPlayersCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      AnimationsPlayersCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AnimationsPlayersPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AnimationsPlayers.
   * @param {AnimationsPlayersDeleteArgs} args - Arguments to delete one AnimationsPlayers.
   * @example
   * // Delete one AnimationsPlayers
   * const AnimationsPlayers = await prisma.animationsPlayers.delete({
   *   where: {
   *     // ... filter to delete one AnimationsPlayers
   *   }
   * })
   *
   */
  delete<T extends AnimationsPlayersDeleteArgs>(
    args: Prisma.SelectSubset<T, AnimationsPlayersDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__AnimationsPlayersClient<
    runtime.Types.Result.GetResult<
      Prisma.$AnimationsPlayersPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AnimationsPlayers.
   * @param {AnimationsPlayersUpdateArgs} args - Arguments to update one AnimationsPlayers.
   * @example
   * // Update one AnimationsPlayers
   * const animationsPlayers = await prisma.animationsPlayers.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AnimationsPlayersUpdateArgs>(
    args: Prisma.SelectSubset<T, AnimationsPlayersUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__AnimationsPlayersClient<
    runtime.Types.Result.GetResult<
      Prisma.$AnimationsPlayersPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AnimationsPlayers.
   * @param {AnimationsPlayersDeleteManyArgs} args - Arguments to filter AnimationsPlayers to delete.
   * @example
   * // Delete a few AnimationsPlayers
   * const { count } = await prisma.animationsPlayers.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AnimationsPlayersDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AnimationsPlayersDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AnimationsPlayers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnimationsPlayersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AnimationsPlayers
   * const animationsPlayers = await prisma.animationsPlayers.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AnimationsPlayersUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AnimationsPlayersUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AnimationsPlayers and returns the data updated in the database.
   * @param {AnimationsPlayersUpdateManyAndReturnArgs} args - Arguments to update many AnimationsPlayers.
   * @example
   * // Update many AnimationsPlayers
   * const animationsPlayers = await prisma.animationsPlayers.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AnimationsPlayers and only return the `playerId`
   * const animationsPlayersWithPlayerIdOnly = await prisma.animationsPlayers.updateManyAndReturn({
   *   select: { playerId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AnimationsPlayersUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      AnimationsPlayersUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AnimationsPlayersPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AnimationsPlayers.
   * @param {AnimationsPlayersUpsertArgs} args - Arguments to update or create a AnimationsPlayers.
   * @example
   * // Update or create a AnimationsPlayers
   * const animationsPlayers = await prisma.animationsPlayers.upsert({
   *   create: {
   *     // ... data to create a AnimationsPlayers
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AnimationsPlayers we want to update
   *   }
   * })
   */
  upsert<T extends AnimationsPlayersUpsertArgs>(
    args: Prisma.SelectSubset<T, AnimationsPlayersUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__AnimationsPlayersClient<
    runtime.Types.Result.GetResult<
      Prisma.$AnimationsPlayersPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AnimationsPlayers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnimationsPlayersCountArgs} args - Arguments to filter AnimationsPlayers to count.
   * @example
   * // Count the number of AnimationsPlayers
   * const count = await prisma.animationsPlayers.count({
   *   where: {
   *     // ... the filter for the AnimationsPlayers we want to count
   *   }
   * })
   **/
  count<T extends AnimationsPlayersCountArgs>(
    args?: Prisma.Subset<T, AnimationsPlayersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            AnimationsPlayersCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AnimationsPlayers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnimationsPlayersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AnimationsPlayersAggregateArgs>(
    args: Prisma.Subset<T, AnimationsPlayersAggregateArgs>,
  ): Prisma.PrismaPromise<GetAnimationsPlayersAggregateType<T>>;

  /**
   * Group by AnimationsPlayers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnimationsPlayersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AnimationsPlayersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AnimationsPlayersGroupByArgs["orderBy"] }
      : { orderBy?: AnimationsPlayersGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      AnimationsPlayersGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetAnimationsPlayersGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AnimationsPlayers model
   */
  readonly fields: AnimationsPlayersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AnimationsPlayers.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AnimationsPlayersClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  player<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  animation<T extends Prisma.AnimationDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AnimationDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__AnimationClient<
    | runtime.Types.Result.GetResult<
        Prisma.$AnimationPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AnimationsPlayers model
 */
export interface AnimationsPlayersFieldRefs {
  readonly playerId: Prisma.FieldRef<"AnimationsPlayers", "Int">;
  readonly animationId: Prisma.FieldRef<"AnimationsPlayers", "Int">;
  readonly score: Prisma.FieldRef<"AnimationsPlayers", "Int">;
}

// Custom InputTypes
/**
 * AnimationsPlayers findUnique
 */
export type AnimationsPlayersFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AnimationsPlayers
   */
  select?: Prisma.AnimationsPlayersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AnimationsPlayers
   */
  omit?: Prisma.AnimationsPlayersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationsPlayersInclude<ExtArgs> | null;
  /**
   * Filter, which AnimationsPlayers to fetch.
   */
  where: Prisma.AnimationsPlayersWhereUniqueInput;
};

/**
 * AnimationsPlayers findUniqueOrThrow
 */
export type AnimationsPlayersFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AnimationsPlayers
   */
  select?: Prisma.AnimationsPlayersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AnimationsPlayers
   */
  omit?: Prisma.AnimationsPlayersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationsPlayersInclude<ExtArgs> | null;
  /**
   * Filter, which AnimationsPlayers to fetch.
   */
  where: Prisma.AnimationsPlayersWhereUniqueInput;
};

/**
 * AnimationsPlayers findFirst
 */
export type AnimationsPlayersFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AnimationsPlayers
   */
  select?: Prisma.AnimationsPlayersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AnimationsPlayers
   */
  omit?: Prisma.AnimationsPlayersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationsPlayersInclude<ExtArgs> | null;
  /**
   * Filter, which AnimationsPlayers to fetch.
   */
  where?: Prisma.AnimationsPlayersWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AnimationsPlayers to fetch.
   */
  orderBy?:
    | Prisma.AnimationsPlayersOrderByWithRelationInput
    | Prisma.AnimationsPlayersOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AnimationsPlayers.
   */
  cursor?: Prisma.AnimationsPlayersWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AnimationsPlayers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AnimationsPlayers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AnimationsPlayers.
   */
  distinct?:
    | Prisma.AnimationsPlayersScalarFieldEnum
    | Prisma.AnimationsPlayersScalarFieldEnum[];
};

/**
 * AnimationsPlayers findFirstOrThrow
 */
export type AnimationsPlayersFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AnimationsPlayers
   */
  select?: Prisma.AnimationsPlayersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AnimationsPlayers
   */
  omit?: Prisma.AnimationsPlayersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationsPlayersInclude<ExtArgs> | null;
  /**
   * Filter, which AnimationsPlayers to fetch.
   */
  where?: Prisma.AnimationsPlayersWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AnimationsPlayers to fetch.
   */
  orderBy?:
    | Prisma.AnimationsPlayersOrderByWithRelationInput
    | Prisma.AnimationsPlayersOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AnimationsPlayers.
   */
  cursor?: Prisma.AnimationsPlayersWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AnimationsPlayers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AnimationsPlayers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AnimationsPlayers.
   */
  distinct?:
    | Prisma.AnimationsPlayersScalarFieldEnum
    | Prisma.AnimationsPlayersScalarFieldEnum[];
};

/**
 * AnimationsPlayers findMany
 */
export type AnimationsPlayersFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AnimationsPlayers
   */
  select?: Prisma.AnimationsPlayersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AnimationsPlayers
   */
  omit?: Prisma.AnimationsPlayersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationsPlayersInclude<ExtArgs> | null;
  /**
   * Filter, which AnimationsPlayers to fetch.
   */
  where?: Prisma.AnimationsPlayersWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AnimationsPlayers to fetch.
   */
  orderBy?:
    | Prisma.AnimationsPlayersOrderByWithRelationInput
    | Prisma.AnimationsPlayersOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AnimationsPlayers.
   */
  cursor?: Prisma.AnimationsPlayersWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AnimationsPlayers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AnimationsPlayers.
   */
  skip?: number;
  distinct?:
    | Prisma.AnimationsPlayersScalarFieldEnum
    | Prisma.AnimationsPlayersScalarFieldEnum[];
};

/**
 * AnimationsPlayers create
 */
export type AnimationsPlayersCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AnimationsPlayers
   */
  select?: Prisma.AnimationsPlayersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AnimationsPlayers
   */
  omit?: Prisma.AnimationsPlayersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationsPlayersInclude<ExtArgs> | null;
  /**
   * The data needed to create a AnimationsPlayers.
   */
  data: Prisma.XOR<
    Prisma.AnimationsPlayersCreateInput,
    Prisma.AnimationsPlayersUncheckedCreateInput
  >;
};

/**
 * AnimationsPlayers createMany
 */
export type AnimationsPlayersCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many AnimationsPlayers.
   */
  data:
    | Prisma.AnimationsPlayersCreateManyInput
    | Prisma.AnimationsPlayersCreateManyInput[];
};

/**
 * AnimationsPlayers createManyAndReturn
 */
export type AnimationsPlayersCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AnimationsPlayers
   */
  select?: Prisma.AnimationsPlayersSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AnimationsPlayers
   */
  omit?: Prisma.AnimationsPlayersOmit<ExtArgs> | null;
  /**
   * The data used to create many AnimationsPlayers.
   */
  data:
    | Prisma.AnimationsPlayersCreateManyInput
    | Prisma.AnimationsPlayersCreateManyInput[];
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationsPlayersIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * AnimationsPlayers update
 */
export type AnimationsPlayersUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AnimationsPlayers
   */
  select?: Prisma.AnimationsPlayersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AnimationsPlayers
   */
  omit?: Prisma.AnimationsPlayersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationsPlayersInclude<ExtArgs> | null;
  /**
   * The data needed to update a AnimationsPlayers.
   */
  data: Prisma.XOR<
    Prisma.AnimationsPlayersUpdateInput,
    Prisma.AnimationsPlayersUncheckedUpdateInput
  >;
  /**
   * Choose, which AnimationsPlayers to update.
   */
  where: Prisma.AnimationsPlayersWhereUniqueInput;
};

/**
 * AnimationsPlayers updateMany
 */
export type AnimationsPlayersUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update AnimationsPlayers.
   */
  data: Prisma.XOR<
    Prisma.AnimationsPlayersUpdateManyMutationInput,
    Prisma.AnimationsPlayersUncheckedUpdateManyInput
  >;
  /**
   * Filter which AnimationsPlayers to update
   */
  where?: Prisma.AnimationsPlayersWhereInput;
  /**
   * Limit how many AnimationsPlayers to update.
   */
  limit?: number;
};

/**
 * AnimationsPlayers updateManyAndReturn
 */
export type AnimationsPlayersUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AnimationsPlayers
   */
  select?: Prisma.AnimationsPlayersSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AnimationsPlayers
   */
  omit?: Prisma.AnimationsPlayersOmit<ExtArgs> | null;
  /**
   * The data used to update AnimationsPlayers.
   */
  data: Prisma.XOR<
    Prisma.AnimationsPlayersUpdateManyMutationInput,
    Prisma.AnimationsPlayersUncheckedUpdateManyInput
  >;
  /**
   * Filter which AnimationsPlayers to update
   */
  where?: Prisma.AnimationsPlayersWhereInput;
  /**
   * Limit how many AnimationsPlayers to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationsPlayersIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * AnimationsPlayers upsert
 */
export type AnimationsPlayersUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AnimationsPlayers
   */
  select?: Prisma.AnimationsPlayersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AnimationsPlayers
   */
  omit?: Prisma.AnimationsPlayersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationsPlayersInclude<ExtArgs> | null;
  /**
   * The filter to search for the AnimationsPlayers to update in case it exists.
   */
  where: Prisma.AnimationsPlayersWhereUniqueInput;
  /**
   * In case the AnimationsPlayers found by the `where` argument doesn't exist, create a new AnimationsPlayers with this data.
   */
  create: Prisma.XOR<
    Prisma.AnimationsPlayersCreateInput,
    Prisma.AnimationsPlayersUncheckedCreateInput
  >;
  /**
   * In case the AnimationsPlayers was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.AnimationsPlayersUpdateInput,
    Prisma.AnimationsPlayersUncheckedUpdateInput
  >;
};

/**
 * AnimationsPlayers delete
 */
export type AnimationsPlayersDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AnimationsPlayers
   */
  select?: Prisma.AnimationsPlayersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AnimationsPlayers
   */
  omit?: Prisma.AnimationsPlayersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationsPlayersInclude<ExtArgs> | null;
  /**
   * Filter which AnimationsPlayers to delete.
   */
  where: Prisma.AnimationsPlayersWhereUniqueInput;
};

/**
 * AnimationsPlayers deleteMany
 */
export type AnimationsPlayersDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AnimationsPlayers to delete
   */
  where?: Prisma.AnimationsPlayersWhereInput;
  /**
   * Limit how many AnimationsPlayers to delete.
   */
  limit?: number;
};

/**
 * AnimationsPlayers without action
 */
export type AnimationsPlayersDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AnimationsPlayers
   */
  select?: Prisma.AnimationsPlayersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AnimationsPlayers
   */
  omit?: Prisma.AnimationsPlayersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationsPlayersInclude<ExtArgs> | null;
};
