
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `LanDay` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model LanDay
 * 
 */
export type LanDayModel = runtime.Types.Result.DefaultSelection<Prisma.$LanDayPayload>

export type AggregateLanDay = {
  _count: LanDayCountAggregateOutputType | null
  _avg: LanDayAvgAggregateOutputType | null
  _sum: LanDaySumAggregateOutputType | null
  _min: LanDayMinAggregateOutputType | null
  _max: LanDayMaxAggregateOutputType | null
}

export type LanDayAvgAggregateOutputType = {
  id: number | null
  weight: number | null
}

export type LanDaySumAggregateOutputType = {
  id: number | null
  weight: number | null
}

export type LanDayMinAggregateOutputType = {
  id: number | null
  name: string | null
  weight: number | null
}

export type LanDayMaxAggregateOutputType = {
  id: number | null
  name: string | null
  weight: number | null
}

export type LanDayCountAggregateOutputType = {
  id: number
  name: number
  weight: number
  _all: number
}


export type LanDayAvgAggregateInputType = {
  id?: true
  weight?: true
}

export type LanDaySumAggregateInputType = {
  id?: true
  weight?: true
}

export type LanDayMinAggregateInputType = {
  id?: true
  name?: true
  weight?: true
}

export type LanDayMaxAggregateInputType = {
  id?: true
  name?: true
  weight?: true
}

export type LanDayCountAggregateInputType = {
  id?: true
  name?: true
  weight?: true
  _all?: true
}

export type LanDayAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LanDay to aggregate.
   */
  where?: Prisma.LanDayWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LanDays to fetch.
   */
  orderBy?: Prisma.LanDayOrderByWithRelationInput | Prisma.LanDayOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LanDayWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LanDays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LanDays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned LanDays
  **/
  _count?: true | LanDayCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: LanDayAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: LanDaySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LanDayMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LanDayMaxAggregateInputType
}

export type GetLanDayAggregateType<T extends LanDayAggregateArgs> = {
      [P in keyof T & keyof AggregateLanDay]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLanDay[P]>
    : Prisma.GetScalarType<T[P], AggregateLanDay[P]>
}




export type LanDayGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LanDayWhereInput
  orderBy?: Prisma.LanDayOrderByWithAggregationInput | Prisma.LanDayOrderByWithAggregationInput[]
  by: Prisma.LanDayScalarFieldEnum[] | Prisma.LanDayScalarFieldEnum
  having?: Prisma.LanDayScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LanDayCountAggregateInputType | true
  _avg?: LanDayAvgAggregateInputType
  _sum?: LanDaySumAggregateInputType
  _min?: LanDayMinAggregateInputType
  _max?: LanDayMaxAggregateInputType
}

export type LanDayGroupByOutputType = {
  id: number
  name: string
  weight: number
  _count: LanDayCountAggregateOutputType | null
  _avg: LanDayAvgAggregateOutputType | null
  _sum: LanDaySumAggregateOutputType | null
  _min: LanDayMinAggregateOutputType | null
  _max: LanDayMaxAggregateOutputType | null
}

type GetLanDayGroupByPayload<T extends LanDayGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LanDayGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LanDayGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LanDayGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LanDayGroupByOutputType[P]>
      }
    >
  >



export type LanDayWhereInput = {
  AND?: Prisma.LanDayWhereInput | Prisma.LanDayWhereInput[]
  OR?: Prisma.LanDayWhereInput[]
  NOT?: Prisma.LanDayWhereInput | Prisma.LanDayWhereInput[]
  id?: Prisma.IntFilter<"LanDay"> | number
  name?: Prisma.StringFilter<"LanDay"> | string
  weight?: Prisma.IntFilter<"LanDay"> | number
  animations?: Prisma.AnimationListRelationFilter
}

export type LanDayOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  animations?: Prisma.AnimationOrderByRelationAggregateInput
}

export type LanDayWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.LanDayWhereInput | Prisma.LanDayWhereInput[]
  OR?: Prisma.LanDayWhereInput[]
  NOT?: Prisma.LanDayWhereInput | Prisma.LanDayWhereInput[]
  name?: Prisma.StringFilter<"LanDay"> | string
  weight?: Prisma.IntFilter<"LanDay"> | number
  animations?: Prisma.AnimationListRelationFilter
}, "id">

export type LanDayOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  _count?: Prisma.LanDayCountOrderByAggregateInput
  _avg?: Prisma.LanDayAvgOrderByAggregateInput
  _max?: Prisma.LanDayMaxOrderByAggregateInput
  _min?: Prisma.LanDayMinOrderByAggregateInput
  _sum?: Prisma.LanDaySumOrderByAggregateInput
}

export type LanDayScalarWhereWithAggregatesInput = {
  AND?: Prisma.LanDayScalarWhereWithAggregatesInput | Prisma.LanDayScalarWhereWithAggregatesInput[]
  OR?: Prisma.LanDayScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LanDayScalarWhereWithAggregatesInput | Prisma.LanDayScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"LanDay"> | number
  name?: Prisma.StringWithAggregatesFilter<"LanDay"> | string
  weight?: Prisma.IntWithAggregatesFilter<"LanDay"> | number
}

export type LanDayCreateInput = {
  name: string
  weight: number
  animations?: Prisma.AnimationCreateNestedManyWithoutLanDayInput
}

export type LanDayUncheckedCreateInput = {
  id?: number
  name: string
  weight: number
  animations?: Prisma.AnimationUncheckedCreateNestedManyWithoutLanDayInput
}

export type LanDayUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  animations?: Prisma.AnimationUpdateManyWithoutLanDayNestedInput
}

export type LanDayUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  animations?: Prisma.AnimationUncheckedUpdateManyWithoutLanDayNestedInput
}

export type LanDayCreateManyInput = {
  id?: number
  name: string
  weight: number
}

export type LanDayUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
}

export type LanDayUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
}

export type LanDayNullableScalarRelationFilter = {
  is?: Prisma.LanDayWhereInput | null
  isNot?: Prisma.LanDayWhereInput | null
}

export type LanDayCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type LanDayAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type LanDayMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type LanDayMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type LanDaySumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type LanDayCreateNestedOneWithoutAnimationsInput = {
  create?: Prisma.XOR<Prisma.LanDayCreateWithoutAnimationsInput, Prisma.LanDayUncheckedCreateWithoutAnimationsInput>
  connectOrCreate?: Prisma.LanDayCreateOrConnectWithoutAnimationsInput
  connect?: Prisma.LanDayWhereUniqueInput
}

export type LanDayUpdateOneWithoutAnimationsNestedInput = {
  create?: Prisma.XOR<Prisma.LanDayCreateWithoutAnimationsInput, Prisma.LanDayUncheckedCreateWithoutAnimationsInput>
  connectOrCreate?: Prisma.LanDayCreateOrConnectWithoutAnimationsInput
  upsert?: Prisma.LanDayUpsertWithoutAnimationsInput
  disconnect?: Prisma.LanDayWhereInput | boolean
  delete?: Prisma.LanDayWhereInput | boolean
  connect?: Prisma.LanDayWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.LanDayUpdateToOneWithWhereWithoutAnimationsInput, Prisma.LanDayUpdateWithoutAnimationsInput>, Prisma.LanDayUncheckedUpdateWithoutAnimationsInput>
}

export type LanDayCreateWithoutAnimationsInput = {
  name: string
  weight: number
}

export type LanDayUncheckedCreateWithoutAnimationsInput = {
  id?: number
  name: string
  weight: number
}

export type LanDayCreateOrConnectWithoutAnimationsInput = {
  where: Prisma.LanDayWhereUniqueInput
  create: Prisma.XOR<Prisma.LanDayCreateWithoutAnimationsInput, Prisma.LanDayUncheckedCreateWithoutAnimationsInput>
}

export type LanDayUpsertWithoutAnimationsInput = {
  update: Prisma.XOR<Prisma.LanDayUpdateWithoutAnimationsInput, Prisma.LanDayUncheckedUpdateWithoutAnimationsInput>
  create: Prisma.XOR<Prisma.LanDayCreateWithoutAnimationsInput, Prisma.LanDayUncheckedCreateWithoutAnimationsInput>
  where?: Prisma.LanDayWhereInput
}

export type LanDayUpdateToOneWithWhereWithoutAnimationsInput = {
  where?: Prisma.LanDayWhereInput
  data: Prisma.XOR<Prisma.LanDayUpdateWithoutAnimationsInput, Prisma.LanDayUncheckedUpdateWithoutAnimationsInput>
}

export type LanDayUpdateWithoutAnimationsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
}

export type LanDayUncheckedUpdateWithoutAnimationsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
}


/**
 * Count Type LanDayCountOutputType
 */

export type LanDayCountOutputType = {
  animations: number
}

export type LanDayCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  animations?: boolean | LanDayCountOutputTypeCountAnimationsArgs
}

/**
 * LanDayCountOutputType without action
 */
export type LanDayCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LanDayCountOutputType
   */
  select?: Prisma.LanDayCountOutputTypeSelect<ExtArgs> | null
}

/**
 * LanDayCountOutputType without action
 */
export type LanDayCountOutputTypeCountAnimationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AnimationWhereInput
}


export type LanDaySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  weight?: boolean
  animations?: boolean | Prisma.LanDay$animationsArgs<ExtArgs>
  _count?: boolean | Prisma.LanDayCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["lanDay"]>

export type LanDaySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  weight?: boolean
}, ExtArgs["result"]["lanDay"]>

export type LanDaySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  weight?: boolean
}, ExtArgs["result"]["lanDay"]>

export type LanDaySelectScalar = {
  id?: boolean
  name?: boolean
  weight?: boolean
}

export type LanDayOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "weight", ExtArgs["result"]["lanDay"]>
export type LanDayInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  animations?: boolean | Prisma.LanDay$animationsArgs<ExtArgs>
  _count?: boolean | Prisma.LanDayCountOutputTypeDefaultArgs<ExtArgs>
}
export type LanDayIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type LanDayIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $LanDayPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "LanDay"
  objects: {
    animations: Prisma.$AnimationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    weight: number
  }, ExtArgs["result"]["lanDay"]>
  composites: {}
}

export type LanDayGetPayload<S extends boolean | null | undefined | LanDayDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LanDayPayload, S>

export type LanDayCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LanDayFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LanDayCountAggregateInputType | true
  }

export interface LanDayDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LanDay'], meta: { name: 'LanDay' } }
  /**
   * Find zero or one LanDay that matches the filter.
   * @param {LanDayFindUniqueArgs} args - Arguments to find a LanDay
   * @example
   * // Get one LanDay
   * const lanDay = await prisma.lanDay.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LanDayFindUniqueArgs>(args: Prisma.SelectSubset<T, LanDayFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LanDayClient<runtime.Types.Result.GetResult<Prisma.$LanDayPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one LanDay that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LanDayFindUniqueOrThrowArgs} args - Arguments to find a LanDay
   * @example
   * // Get one LanDay
   * const lanDay = await prisma.lanDay.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LanDayFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LanDayFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LanDayClient<runtime.Types.Result.GetResult<Prisma.$LanDayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LanDay that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LanDayFindFirstArgs} args - Arguments to find a LanDay
   * @example
   * // Get one LanDay
   * const lanDay = await prisma.lanDay.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LanDayFindFirstArgs>(args?: Prisma.SelectSubset<T, LanDayFindFirstArgs<ExtArgs>>): Prisma.Prisma__LanDayClient<runtime.Types.Result.GetResult<Prisma.$LanDayPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LanDay that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LanDayFindFirstOrThrowArgs} args - Arguments to find a LanDay
   * @example
   * // Get one LanDay
   * const lanDay = await prisma.lanDay.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LanDayFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LanDayFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LanDayClient<runtime.Types.Result.GetResult<Prisma.$LanDayPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more LanDays that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LanDayFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LanDays
   * const lanDays = await prisma.lanDay.findMany()
   * 
   * // Get first 10 LanDays
   * const lanDays = await prisma.lanDay.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const lanDayWithIdOnly = await prisma.lanDay.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LanDayFindManyArgs>(args?: Prisma.SelectSubset<T, LanDayFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LanDayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a LanDay.
   * @param {LanDayCreateArgs} args - Arguments to create a LanDay.
   * @example
   * // Create one LanDay
   * const LanDay = await prisma.lanDay.create({
   *   data: {
   *     // ... data to create a LanDay
   *   }
   * })
   * 
   */
  create<T extends LanDayCreateArgs>(args: Prisma.SelectSubset<T, LanDayCreateArgs<ExtArgs>>): Prisma.Prisma__LanDayClient<runtime.Types.Result.GetResult<Prisma.$LanDayPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many LanDays.
   * @param {LanDayCreateManyArgs} args - Arguments to create many LanDays.
   * @example
   * // Create many LanDays
   * const lanDay = await prisma.lanDay.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LanDayCreateManyArgs>(args?: Prisma.SelectSubset<T, LanDayCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many LanDays and returns the data saved in the database.
   * @param {LanDayCreateManyAndReturnArgs} args - Arguments to create many LanDays.
   * @example
   * // Create many LanDays
   * const lanDay = await prisma.lanDay.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many LanDays and only return the `id`
   * const lanDayWithIdOnly = await prisma.lanDay.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LanDayCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LanDayCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LanDayPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a LanDay.
   * @param {LanDayDeleteArgs} args - Arguments to delete one LanDay.
   * @example
   * // Delete one LanDay
   * const LanDay = await prisma.lanDay.delete({
   *   where: {
   *     // ... filter to delete one LanDay
   *   }
   * })
   * 
   */
  delete<T extends LanDayDeleteArgs>(args: Prisma.SelectSubset<T, LanDayDeleteArgs<ExtArgs>>): Prisma.Prisma__LanDayClient<runtime.Types.Result.GetResult<Prisma.$LanDayPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one LanDay.
   * @param {LanDayUpdateArgs} args - Arguments to update one LanDay.
   * @example
   * // Update one LanDay
   * const lanDay = await prisma.lanDay.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LanDayUpdateArgs>(args: Prisma.SelectSubset<T, LanDayUpdateArgs<ExtArgs>>): Prisma.Prisma__LanDayClient<runtime.Types.Result.GetResult<Prisma.$LanDayPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more LanDays.
   * @param {LanDayDeleteManyArgs} args - Arguments to filter LanDays to delete.
   * @example
   * // Delete a few LanDays
   * const { count } = await prisma.lanDay.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LanDayDeleteManyArgs>(args?: Prisma.SelectSubset<T, LanDayDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LanDays.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LanDayUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LanDays
   * const lanDay = await prisma.lanDay.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LanDayUpdateManyArgs>(args: Prisma.SelectSubset<T, LanDayUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LanDays and returns the data updated in the database.
   * @param {LanDayUpdateManyAndReturnArgs} args - Arguments to update many LanDays.
   * @example
   * // Update many LanDays
   * const lanDay = await prisma.lanDay.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more LanDays and only return the `id`
   * const lanDayWithIdOnly = await prisma.lanDay.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LanDayUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LanDayUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LanDayPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one LanDay.
   * @param {LanDayUpsertArgs} args - Arguments to update or create a LanDay.
   * @example
   * // Update or create a LanDay
   * const lanDay = await prisma.lanDay.upsert({
   *   create: {
   *     // ... data to create a LanDay
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LanDay we want to update
   *   }
   * })
   */
  upsert<T extends LanDayUpsertArgs>(args: Prisma.SelectSubset<T, LanDayUpsertArgs<ExtArgs>>): Prisma.Prisma__LanDayClient<runtime.Types.Result.GetResult<Prisma.$LanDayPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of LanDays.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LanDayCountArgs} args - Arguments to filter LanDays to count.
   * @example
   * // Count the number of LanDays
   * const count = await prisma.lanDay.count({
   *   where: {
   *     // ... the filter for the LanDays we want to count
   *   }
   * })
  **/
  count<T extends LanDayCountArgs>(
    args?: Prisma.Subset<T, LanDayCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LanDayCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a LanDay.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LanDayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LanDayAggregateArgs>(args: Prisma.Subset<T, LanDayAggregateArgs>): Prisma.PrismaPromise<GetLanDayAggregateType<T>>

  /**
   * Group by LanDay.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LanDayGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LanDayGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LanDayGroupByArgs['orderBy'] }
      : { orderBy?: LanDayGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LanDayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanDayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the LanDay model
 */
readonly fields: LanDayFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for LanDay.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LanDayClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  animations<T extends Prisma.LanDay$animationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.LanDay$animationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the LanDay model
 */
export interface LanDayFieldRefs {
  readonly id: Prisma.FieldRef<"LanDay", 'Int'>
  readonly name: Prisma.FieldRef<"LanDay", 'String'>
  readonly weight: Prisma.FieldRef<"LanDay", 'Int'>
}
    

// Custom InputTypes
/**
 * LanDay findUnique
 */
export type LanDayFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LanDay
   */
  select?: Prisma.LanDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LanDay
   */
  omit?: Prisma.LanDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanDayInclude<ExtArgs> | null
  /**
   * Filter, which LanDay to fetch.
   */
  where: Prisma.LanDayWhereUniqueInput
}

/**
 * LanDay findUniqueOrThrow
 */
export type LanDayFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LanDay
   */
  select?: Prisma.LanDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LanDay
   */
  omit?: Prisma.LanDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanDayInclude<ExtArgs> | null
  /**
   * Filter, which LanDay to fetch.
   */
  where: Prisma.LanDayWhereUniqueInput
}

/**
 * LanDay findFirst
 */
export type LanDayFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LanDay
   */
  select?: Prisma.LanDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LanDay
   */
  omit?: Prisma.LanDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanDayInclude<ExtArgs> | null
  /**
   * Filter, which LanDay to fetch.
   */
  where?: Prisma.LanDayWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LanDays to fetch.
   */
  orderBy?: Prisma.LanDayOrderByWithRelationInput | Prisma.LanDayOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LanDays.
   */
  cursor?: Prisma.LanDayWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LanDays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LanDays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LanDays.
   */
  distinct?: Prisma.LanDayScalarFieldEnum | Prisma.LanDayScalarFieldEnum[]
}

/**
 * LanDay findFirstOrThrow
 */
export type LanDayFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LanDay
   */
  select?: Prisma.LanDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LanDay
   */
  omit?: Prisma.LanDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanDayInclude<ExtArgs> | null
  /**
   * Filter, which LanDay to fetch.
   */
  where?: Prisma.LanDayWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LanDays to fetch.
   */
  orderBy?: Prisma.LanDayOrderByWithRelationInput | Prisma.LanDayOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LanDays.
   */
  cursor?: Prisma.LanDayWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LanDays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LanDays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LanDays.
   */
  distinct?: Prisma.LanDayScalarFieldEnum | Prisma.LanDayScalarFieldEnum[]
}

/**
 * LanDay findMany
 */
export type LanDayFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LanDay
   */
  select?: Prisma.LanDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LanDay
   */
  omit?: Prisma.LanDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanDayInclude<ExtArgs> | null
  /**
   * Filter, which LanDays to fetch.
   */
  where?: Prisma.LanDayWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LanDays to fetch.
   */
  orderBy?: Prisma.LanDayOrderByWithRelationInput | Prisma.LanDayOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing LanDays.
   */
  cursor?: Prisma.LanDayWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LanDays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LanDays.
   */
  skip?: number
  distinct?: Prisma.LanDayScalarFieldEnum | Prisma.LanDayScalarFieldEnum[]
}

/**
 * LanDay create
 */
export type LanDayCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LanDay
   */
  select?: Prisma.LanDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LanDay
   */
  omit?: Prisma.LanDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanDayInclude<ExtArgs> | null
  /**
   * The data needed to create a LanDay.
   */
  data: Prisma.XOR<Prisma.LanDayCreateInput, Prisma.LanDayUncheckedCreateInput>
}

/**
 * LanDay createMany
 */
export type LanDayCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many LanDays.
   */
  data: Prisma.LanDayCreateManyInput | Prisma.LanDayCreateManyInput[]
}

/**
 * LanDay createManyAndReturn
 */
export type LanDayCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LanDay
   */
  select?: Prisma.LanDaySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LanDay
   */
  omit?: Prisma.LanDayOmit<ExtArgs> | null
  /**
   * The data used to create many LanDays.
   */
  data: Prisma.LanDayCreateManyInput | Prisma.LanDayCreateManyInput[]
}

/**
 * LanDay update
 */
export type LanDayUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LanDay
   */
  select?: Prisma.LanDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LanDay
   */
  omit?: Prisma.LanDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanDayInclude<ExtArgs> | null
  /**
   * The data needed to update a LanDay.
   */
  data: Prisma.XOR<Prisma.LanDayUpdateInput, Prisma.LanDayUncheckedUpdateInput>
  /**
   * Choose, which LanDay to update.
   */
  where: Prisma.LanDayWhereUniqueInput
}

/**
 * LanDay updateMany
 */
export type LanDayUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update LanDays.
   */
  data: Prisma.XOR<Prisma.LanDayUpdateManyMutationInput, Prisma.LanDayUncheckedUpdateManyInput>
  /**
   * Filter which LanDays to update
   */
  where?: Prisma.LanDayWhereInput
  /**
   * Limit how many LanDays to update.
   */
  limit?: number
}

/**
 * LanDay updateManyAndReturn
 */
export type LanDayUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LanDay
   */
  select?: Prisma.LanDaySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LanDay
   */
  omit?: Prisma.LanDayOmit<ExtArgs> | null
  /**
   * The data used to update LanDays.
   */
  data: Prisma.XOR<Prisma.LanDayUpdateManyMutationInput, Prisma.LanDayUncheckedUpdateManyInput>
  /**
   * Filter which LanDays to update
   */
  where?: Prisma.LanDayWhereInput
  /**
   * Limit how many LanDays to update.
   */
  limit?: number
}

/**
 * LanDay upsert
 */
export type LanDayUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LanDay
   */
  select?: Prisma.LanDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LanDay
   */
  omit?: Prisma.LanDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanDayInclude<ExtArgs> | null
  /**
   * The filter to search for the LanDay to update in case it exists.
   */
  where: Prisma.LanDayWhereUniqueInput
  /**
   * In case the LanDay found by the `where` argument doesn't exist, create a new LanDay with this data.
   */
  create: Prisma.XOR<Prisma.LanDayCreateInput, Prisma.LanDayUncheckedCreateInput>
  /**
   * In case the LanDay was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LanDayUpdateInput, Prisma.LanDayUncheckedUpdateInput>
}

/**
 * LanDay delete
 */
export type LanDayDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LanDay
   */
  select?: Prisma.LanDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LanDay
   */
  omit?: Prisma.LanDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanDayInclude<ExtArgs> | null
  /**
   * Filter which LanDay to delete.
   */
  where: Prisma.LanDayWhereUniqueInput
}

/**
 * LanDay deleteMany
 */
export type LanDayDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LanDays to delete
   */
  where?: Prisma.LanDayWhereInput
  /**
   * Limit how many LanDays to delete.
   */
  limit?: number
}

/**
 * LanDay.animations
 */
export type LanDay$animationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Animation
   */
  select?: Prisma.AnimationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Animation
   */
  omit?: Prisma.AnimationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnimationInclude<ExtArgs> | null
  where?: Prisma.AnimationWhereInput
  orderBy?: Prisma.AnimationOrderByWithRelationInput | Prisma.AnimationOrderByWithRelationInput[]
  cursor?: Prisma.AnimationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AnimationScalarFieldEnum | Prisma.AnimationScalarFieldEnum[]
}

/**
 * LanDay without action
 */
export type LanDayDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LanDay
   */
  select?: Prisma.LanDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LanDay
   */
  omit?: Prisma.LanDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanDayInclude<ExtArgs> | null
}
