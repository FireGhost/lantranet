/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `PlayersTeams` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums.js";
import type * as Prisma from "../internal/prismaNamespace.js";

/**
 * Model PlayersTeams
 *
 */
export type PlayersTeamsModel =
  runtime.Types.Result.DefaultSelection<Prisma.$PlayersTeamsPayload>;

export type AggregatePlayersTeams = {
  _count: PlayersTeamsCountAggregateOutputType | null;
  _avg: PlayersTeamsAvgAggregateOutputType | null;
  _sum: PlayersTeamsSumAggregateOutputType | null;
  _min: PlayersTeamsMinAggregateOutputType | null;
  _max: PlayersTeamsMaxAggregateOutputType | null;
};

export type PlayersTeamsAvgAggregateOutputType = {
  teamId: number | null;
  playerId: number | null;
};

export type PlayersTeamsSumAggregateOutputType = {
  teamId: number | null;
  playerId: number | null;
};

export type PlayersTeamsMinAggregateOutputType = {
  teamId: number | null;
  playerId: number | null;
};

export type PlayersTeamsMaxAggregateOutputType = {
  teamId: number | null;
  playerId: number | null;
};

export type PlayersTeamsCountAggregateOutputType = {
  teamId: number;
  playerId: number;
  _all: number;
};

export type PlayersTeamsAvgAggregateInputType = {
  teamId?: true;
  playerId?: true;
};

export type PlayersTeamsSumAggregateInputType = {
  teamId?: true;
  playerId?: true;
};

export type PlayersTeamsMinAggregateInputType = {
  teamId?: true;
  playerId?: true;
};

export type PlayersTeamsMaxAggregateInputType = {
  teamId?: true;
  playerId?: true;
};

export type PlayersTeamsCountAggregateInputType = {
  teamId?: true;
  playerId?: true;
  _all?: true;
};

export type PlayersTeamsAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which PlayersTeams to aggregate.
   */
  where?: Prisma.PlayersTeamsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PlayersTeams to fetch.
   */
  orderBy?:
    | Prisma.PlayersTeamsOrderByWithRelationInput
    | Prisma.PlayersTeamsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.PlayersTeamsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PlayersTeams from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PlayersTeams.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned PlayersTeams
   **/
  _count?: true | PlayersTeamsCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: PlayersTeamsAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: PlayersTeamsSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: PlayersTeamsMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: PlayersTeamsMaxAggregateInputType;
};

export type GetPlayersTeamsAggregateType<T extends PlayersTeamsAggregateArgs> =
  {
    [P in keyof T & keyof AggregatePlayersTeams]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : Prisma.GetScalarType<T[P], AggregatePlayersTeams[P]>
      : Prisma.GetScalarType<T[P], AggregatePlayersTeams[P]>;
  };

export type PlayersTeamsGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.PlayersTeamsWhereInput;
  orderBy?:
    | Prisma.PlayersTeamsOrderByWithAggregationInput
    | Prisma.PlayersTeamsOrderByWithAggregationInput[];
  by: Prisma.PlayersTeamsScalarFieldEnum[] | Prisma.PlayersTeamsScalarFieldEnum;
  having?: Prisma.PlayersTeamsScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: PlayersTeamsCountAggregateInputType | true;
  _avg?: PlayersTeamsAvgAggregateInputType;
  _sum?: PlayersTeamsSumAggregateInputType;
  _min?: PlayersTeamsMinAggregateInputType;
  _max?: PlayersTeamsMaxAggregateInputType;
};

export type PlayersTeamsGroupByOutputType = {
  teamId: number;
  playerId: number;
  _count: PlayersTeamsCountAggregateOutputType | null;
  _avg: PlayersTeamsAvgAggregateOutputType | null;
  _sum: PlayersTeamsSumAggregateOutputType | null;
  _min: PlayersTeamsMinAggregateOutputType | null;
  _max: PlayersTeamsMaxAggregateOutputType | null;
};

type GetPlayersTeamsGroupByPayload<T extends PlayersTeamsGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<PlayersTeamsGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof PlayersTeamsGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PlayersTeamsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PlayersTeamsGroupByOutputType[P]>;
      }
    >
  >;

export type PlayersTeamsWhereInput = {
  AND?: Prisma.PlayersTeamsWhereInput | Prisma.PlayersTeamsWhereInput[];
  OR?: Prisma.PlayersTeamsWhereInput[];
  NOT?: Prisma.PlayersTeamsWhereInput | Prisma.PlayersTeamsWhereInput[];
  teamId?: Prisma.IntFilter<"PlayersTeams"> | number;
  playerId?: Prisma.IntFilter<"PlayersTeams"> | number;
  team?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
  player?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type PlayersTeamsOrderByWithRelationInput = {
  teamId?: Prisma.SortOrder;
  playerId?: Prisma.SortOrder;
  team?: Prisma.TeamOrderByWithRelationInput;
  player?: Prisma.UserOrderByWithRelationInput;
};

export type PlayersTeamsWhereUniqueInput = Prisma.AtLeast<
  {
    teamId_playerId?: Prisma.PlayersTeamsTeamIdPlayerIdCompoundUniqueInput;
    AND?: Prisma.PlayersTeamsWhereInput | Prisma.PlayersTeamsWhereInput[];
    OR?: Prisma.PlayersTeamsWhereInput[];
    NOT?: Prisma.PlayersTeamsWhereInput | Prisma.PlayersTeamsWhereInput[];
    teamId?: Prisma.IntFilter<"PlayersTeams"> | number;
    playerId?: Prisma.IntFilter<"PlayersTeams"> | number;
    team?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
    player?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "teamId_playerId"
>;

export type PlayersTeamsOrderByWithAggregationInput = {
  teamId?: Prisma.SortOrder;
  playerId?: Prisma.SortOrder;
  _count?: Prisma.PlayersTeamsCountOrderByAggregateInput;
  _avg?: Prisma.PlayersTeamsAvgOrderByAggregateInput;
  _max?: Prisma.PlayersTeamsMaxOrderByAggregateInput;
  _min?: Prisma.PlayersTeamsMinOrderByAggregateInput;
  _sum?: Prisma.PlayersTeamsSumOrderByAggregateInput;
};

export type PlayersTeamsScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.PlayersTeamsScalarWhereWithAggregatesInput
    | Prisma.PlayersTeamsScalarWhereWithAggregatesInput[];
  OR?: Prisma.PlayersTeamsScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.PlayersTeamsScalarWhereWithAggregatesInput
    | Prisma.PlayersTeamsScalarWhereWithAggregatesInput[];
  teamId?: Prisma.IntWithAggregatesFilter<"PlayersTeams"> | number;
  playerId?: Prisma.IntWithAggregatesFilter<"PlayersTeams"> | number;
};

export type PlayersTeamsCreateInput = {
  team: Prisma.TeamCreateNestedOneWithoutPlayersInput;
  player: Prisma.UserCreateNestedOneWithoutTeamsInput;
};

export type PlayersTeamsUncheckedCreateInput = {
  teamId: number;
  playerId: number;
};

export type PlayersTeamsUpdateInput = {
  team?: Prisma.TeamUpdateOneRequiredWithoutPlayersNestedInput;
  player?: Prisma.UserUpdateOneRequiredWithoutTeamsNestedInput;
};

export type PlayersTeamsUncheckedUpdateInput = {
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  playerId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type PlayersTeamsCreateManyInput = {
  teamId: number;
  playerId: number;
};

export type PlayersTeamsUpdateManyMutationInput = {};

export type PlayersTeamsUncheckedUpdateManyInput = {
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  playerId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type PlayersTeamsListRelationFilter = {
  every?: Prisma.PlayersTeamsWhereInput;
  some?: Prisma.PlayersTeamsWhereInput;
  none?: Prisma.PlayersTeamsWhereInput;
};

export type PlayersTeamsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type PlayersTeamsTeamIdPlayerIdCompoundUniqueInput = {
  teamId: number;
  playerId: number;
};

export type PlayersTeamsCountOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
  playerId?: Prisma.SortOrder;
};

export type PlayersTeamsAvgOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
  playerId?: Prisma.SortOrder;
};

export type PlayersTeamsMaxOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
  playerId?: Prisma.SortOrder;
};

export type PlayersTeamsMinOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
  playerId?: Prisma.SortOrder;
};

export type PlayersTeamsSumOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
  playerId?: Prisma.SortOrder;
};

export type PlayersTeamsCreateNestedManyWithoutPlayerInput = {
  create?:
    | Prisma.XOR<
        Prisma.PlayersTeamsCreateWithoutPlayerInput,
        Prisma.PlayersTeamsUncheckedCreateWithoutPlayerInput
      >
    | Prisma.PlayersTeamsCreateWithoutPlayerInput[]
    | Prisma.PlayersTeamsUncheckedCreateWithoutPlayerInput[];
  connectOrCreate?:
    | Prisma.PlayersTeamsCreateOrConnectWithoutPlayerInput
    | Prisma.PlayersTeamsCreateOrConnectWithoutPlayerInput[];
  createMany?: Prisma.PlayersTeamsCreateManyPlayerInputEnvelope;
  connect?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
};

export type PlayersTeamsUncheckedCreateNestedManyWithoutPlayerInput = {
  create?:
    | Prisma.XOR<
        Prisma.PlayersTeamsCreateWithoutPlayerInput,
        Prisma.PlayersTeamsUncheckedCreateWithoutPlayerInput
      >
    | Prisma.PlayersTeamsCreateWithoutPlayerInput[]
    | Prisma.PlayersTeamsUncheckedCreateWithoutPlayerInput[];
  connectOrCreate?:
    | Prisma.PlayersTeamsCreateOrConnectWithoutPlayerInput
    | Prisma.PlayersTeamsCreateOrConnectWithoutPlayerInput[];
  createMany?: Prisma.PlayersTeamsCreateManyPlayerInputEnvelope;
  connect?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
};

export type PlayersTeamsUpdateManyWithoutPlayerNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PlayersTeamsCreateWithoutPlayerInput,
        Prisma.PlayersTeamsUncheckedCreateWithoutPlayerInput
      >
    | Prisma.PlayersTeamsCreateWithoutPlayerInput[]
    | Prisma.PlayersTeamsUncheckedCreateWithoutPlayerInput[];
  connectOrCreate?:
    | Prisma.PlayersTeamsCreateOrConnectWithoutPlayerInput
    | Prisma.PlayersTeamsCreateOrConnectWithoutPlayerInput[];
  upsert?:
    | Prisma.PlayersTeamsUpsertWithWhereUniqueWithoutPlayerInput
    | Prisma.PlayersTeamsUpsertWithWhereUniqueWithoutPlayerInput[];
  createMany?: Prisma.PlayersTeamsCreateManyPlayerInputEnvelope;
  set?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
  disconnect?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
  delete?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
  connect?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
  update?:
    | Prisma.PlayersTeamsUpdateWithWhereUniqueWithoutPlayerInput
    | Prisma.PlayersTeamsUpdateWithWhereUniqueWithoutPlayerInput[];
  updateMany?:
    | Prisma.PlayersTeamsUpdateManyWithWhereWithoutPlayerInput
    | Prisma.PlayersTeamsUpdateManyWithWhereWithoutPlayerInput[];
  deleteMany?:
    | Prisma.PlayersTeamsScalarWhereInput
    | Prisma.PlayersTeamsScalarWhereInput[];
};

export type PlayersTeamsUncheckedUpdateManyWithoutPlayerNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PlayersTeamsCreateWithoutPlayerInput,
        Prisma.PlayersTeamsUncheckedCreateWithoutPlayerInput
      >
    | Prisma.PlayersTeamsCreateWithoutPlayerInput[]
    | Prisma.PlayersTeamsUncheckedCreateWithoutPlayerInput[];
  connectOrCreate?:
    | Prisma.PlayersTeamsCreateOrConnectWithoutPlayerInput
    | Prisma.PlayersTeamsCreateOrConnectWithoutPlayerInput[];
  upsert?:
    | Prisma.PlayersTeamsUpsertWithWhereUniqueWithoutPlayerInput
    | Prisma.PlayersTeamsUpsertWithWhereUniqueWithoutPlayerInput[];
  createMany?: Prisma.PlayersTeamsCreateManyPlayerInputEnvelope;
  set?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
  disconnect?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
  delete?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
  connect?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
  update?:
    | Prisma.PlayersTeamsUpdateWithWhereUniqueWithoutPlayerInput
    | Prisma.PlayersTeamsUpdateWithWhereUniqueWithoutPlayerInput[];
  updateMany?:
    | Prisma.PlayersTeamsUpdateManyWithWhereWithoutPlayerInput
    | Prisma.PlayersTeamsUpdateManyWithWhereWithoutPlayerInput[];
  deleteMany?:
    | Prisma.PlayersTeamsScalarWhereInput
    | Prisma.PlayersTeamsScalarWhereInput[];
};

export type PlayersTeamsCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.PlayersTeamsCreateWithoutTeamInput,
        Prisma.PlayersTeamsUncheckedCreateWithoutTeamInput
      >
    | Prisma.PlayersTeamsCreateWithoutTeamInput[]
    | Prisma.PlayersTeamsUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.PlayersTeamsCreateOrConnectWithoutTeamInput
    | Prisma.PlayersTeamsCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.PlayersTeamsCreateManyTeamInputEnvelope;
  connect?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
};

export type PlayersTeamsUncheckedCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.PlayersTeamsCreateWithoutTeamInput,
        Prisma.PlayersTeamsUncheckedCreateWithoutTeamInput
      >
    | Prisma.PlayersTeamsCreateWithoutTeamInput[]
    | Prisma.PlayersTeamsUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.PlayersTeamsCreateOrConnectWithoutTeamInput
    | Prisma.PlayersTeamsCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.PlayersTeamsCreateManyTeamInputEnvelope;
  connect?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
};

export type PlayersTeamsUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PlayersTeamsCreateWithoutTeamInput,
        Prisma.PlayersTeamsUncheckedCreateWithoutTeamInput
      >
    | Prisma.PlayersTeamsCreateWithoutTeamInput[]
    | Prisma.PlayersTeamsUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.PlayersTeamsCreateOrConnectWithoutTeamInput
    | Prisma.PlayersTeamsCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.PlayersTeamsUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.PlayersTeamsUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.PlayersTeamsCreateManyTeamInputEnvelope;
  set?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
  disconnect?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
  delete?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
  connect?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
  update?:
    | Prisma.PlayersTeamsUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.PlayersTeamsUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.PlayersTeamsUpdateManyWithWhereWithoutTeamInput
    | Prisma.PlayersTeamsUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?:
    | Prisma.PlayersTeamsScalarWhereInput
    | Prisma.PlayersTeamsScalarWhereInput[];
};

export type PlayersTeamsUncheckedUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PlayersTeamsCreateWithoutTeamInput,
        Prisma.PlayersTeamsUncheckedCreateWithoutTeamInput
      >
    | Prisma.PlayersTeamsCreateWithoutTeamInput[]
    | Prisma.PlayersTeamsUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.PlayersTeamsCreateOrConnectWithoutTeamInput
    | Prisma.PlayersTeamsCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.PlayersTeamsUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.PlayersTeamsUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.PlayersTeamsCreateManyTeamInputEnvelope;
  set?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
  disconnect?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
  delete?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
  connect?:
    | Prisma.PlayersTeamsWhereUniqueInput
    | Prisma.PlayersTeamsWhereUniqueInput[];
  update?:
    | Prisma.PlayersTeamsUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.PlayersTeamsUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.PlayersTeamsUpdateManyWithWhereWithoutTeamInput
    | Prisma.PlayersTeamsUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?:
    | Prisma.PlayersTeamsScalarWhereInput
    | Prisma.PlayersTeamsScalarWhereInput[];
};

export type PlayersTeamsCreateWithoutPlayerInput = {
  team: Prisma.TeamCreateNestedOneWithoutPlayersInput;
};

export type PlayersTeamsUncheckedCreateWithoutPlayerInput = {
  teamId: number;
};

export type PlayersTeamsCreateOrConnectWithoutPlayerInput = {
  where: Prisma.PlayersTeamsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PlayersTeamsCreateWithoutPlayerInput,
    Prisma.PlayersTeamsUncheckedCreateWithoutPlayerInput
  >;
};

export type PlayersTeamsCreateManyPlayerInputEnvelope = {
  data:
    | Prisma.PlayersTeamsCreateManyPlayerInput
    | Prisma.PlayersTeamsCreateManyPlayerInput[];
};

export type PlayersTeamsUpsertWithWhereUniqueWithoutPlayerInput = {
  where: Prisma.PlayersTeamsWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.PlayersTeamsUpdateWithoutPlayerInput,
    Prisma.PlayersTeamsUncheckedUpdateWithoutPlayerInput
  >;
  create: Prisma.XOR<
    Prisma.PlayersTeamsCreateWithoutPlayerInput,
    Prisma.PlayersTeamsUncheckedCreateWithoutPlayerInput
  >;
};

export type PlayersTeamsUpdateWithWhereUniqueWithoutPlayerInput = {
  where: Prisma.PlayersTeamsWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.PlayersTeamsUpdateWithoutPlayerInput,
    Prisma.PlayersTeamsUncheckedUpdateWithoutPlayerInput
  >;
};

export type PlayersTeamsUpdateManyWithWhereWithoutPlayerInput = {
  where: Prisma.PlayersTeamsScalarWhereInput;
  data: Prisma.XOR<
    Prisma.PlayersTeamsUpdateManyMutationInput,
    Prisma.PlayersTeamsUncheckedUpdateManyWithoutPlayerInput
  >;
};

export type PlayersTeamsScalarWhereInput = {
  AND?:
    | Prisma.PlayersTeamsScalarWhereInput
    | Prisma.PlayersTeamsScalarWhereInput[];
  OR?: Prisma.PlayersTeamsScalarWhereInput[];
  NOT?:
    | Prisma.PlayersTeamsScalarWhereInput
    | Prisma.PlayersTeamsScalarWhereInput[];
  teamId?: Prisma.IntFilter<"PlayersTeams"> | number;
  playerId?: Prisma.IntFilter<"PlayersTeams"> | number;
};

export type PlayersTeamsCreateWithoutTeamInput = {
  player: Prisma.UserCreateNestedOneWithoutTeamsInput;
};

export type PlayersTeamsUncheckedCreateWithoutTeamInput = {
  playerId: number;
};

export type PlayersTeamsCreateOrConnectWithoutTeamInput = {
  where: Prisma.PlayersTeamsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PlayersTeamsCreateWithoutTeamInput,
    Prisma.PlayersTeamsUncheckedCreateWithoutTeamInput
  >;
};

export type PlayersTeamsCreateManyTeamInputEnvelope = {
  data:
    | Prisma.PlayersTeamsCreateManyTeamInput
    | Prisma.PlayersTeamsCreateManyTeamInput[];
};

export type PlayersTeamsUpsertWithWhereUniqueWithoutTeamInput = {
  where: Prisma.PlayersTeamsWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.PlayersTeamsUpdateWithoutTeamInput,
    Prisma.PlayersTeamsUncheckedUpdateWithoutTeamInput
  >;
  create: Prisma.XOR<
    Prisma.PlayersTeamsCreateWithoutTeamInput,
    Prisma.PlayersTeamsUncheckedCreateWithoutTeamInput
  >;
};

export type PlayersTeamsUpdateWithWhereUniqueWithoutTeamInput = {
  where: Prisma.PlayersTeamsWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.PlayersTeamsUpdateWithoutTeamInput,
    Prisma.PlayersTeamsUncheckedUpdateWithoutTeamInput
  >;
};

export type PlayersTeamsUpdateManyWithWhereWithoutTeamInput = {
  where: Prisma.PlayersTeamsScalarWhereInput;
  data: Prisma.XOR<
    Prisma.PlayersTeamsUpdateManyMutationInput,
    Prisma.PlayersTeamsUncheckedUpdateManyWithoutTeamInput
  >;
};

export type PlayersTeamsCreateManyPlayerInput = {
  teamId: number;
};

export type PlayersTeamsUpdateWithoutPlayerInput = {
  team?: Prisma.TeamUpdateOneRequiredWithoutPlayersNestedInput;
};

export type PlayersTeamsUncheckedUpdateWithoutPlayerInput = {
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type PlayersTeamsUncheckedUpdateManyWithoutPlayerInput = {
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type PlayersTeamsCreateManyTeamInput = {
  playerId: number;
};

export type PlayersTeamsUpdateWithoutTeamInput = {
  player?: Prisma.UserUpdateOneRequiredWithoutTeamsNestedInput;
};

export type PlayersTeamsUncheckedUpdateWithoutTeamInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type PlayersTeamsUncheckedUpdateManyWithoutTeamInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type PlayersTeamsSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    teamId?: boolean;
    playerId?: boolean;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    player?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["playersTeams"]
>;

export type PlayersTeamsSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    teamId?: boolean;
    playerId?: boolean;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    player?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["playersTeams"]
>;

export type PlayersTeamsSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    teamId?: boolean;
    playerId?: boolean;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    player?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["playersTeams"]
>;

export type PlayersTeamsSelectScalar = {
  teamId?: boolean;
  playerId?: boolean;
};

export type PlayersTeamsOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "teamId" | "playerId",
  ExtArgs["result"]["playersTeams"]
>;
export type PlayersTeamsInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  player?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type PlayersTeamsIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  player?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type PlayersTeamsIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  player?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $PlayersTeamsPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "PlayersTeams";
  objects: {
    team: Prisma.$TeamPayload<ExtArgs>;
    player: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      teamId: number;
      playerId: number;
    },
    ExtArgs["result"]["playersTeams"]
  >;
  composites: {};
};

export type PlayersTeamsGetPayload<
  S extends boolean | null | undefined | PlayersTeamsDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$PlayersTeamsPayload, S>;

export type PlayersTeamsCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  PlayersTeamsFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: PlayersTeamsCountAggregateInputType | true;
};

export interface PlayersTeamsDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["PlayersTeams"];
    meta: { name: "PlayersTeams" };
  };
  /**
   * Find zero or one PlayersTeams that matches the filter.
   * @param {PlayersTeamsFindUniqueArgs} args - Arguments to find a PlayersTeams
   * @example
   * // Get one PlayersTeams
   * const playersTeams = await prisma.playersTeams.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PlayersTeamsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, PlayersTeamsFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__PlayersTeamsClient<
    runtime.Types.Result.GetResult<
      Prisma.$PlayersTeamsPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one PlayersTeams that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PlayersTeamsFindUniqueOrThrowArgs} args - Arguments to find a PlayersTeams
   * @example
   * // Get one PlayersTeams
   * const playersTeams = await prisma.playersTeams.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PlayersTeamsFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, PlayersTeamsFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__PlayersTeamsClient<
    runtime.Types.Result.GetResult<
      Prisma.$PlayersTeamsPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first PlayersTeams that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayersTeamsFindFirstArgs} args - Arguments to find a PlayersTeams
   * @example
   * // Get one PlayersTeams
   * const playersTeams = await prisma.playersTeams.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PlayersTeamsFindFirstArgs>(
    args?: Prisma.SelectSubset<T, PlayersTeamsFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__PlayersTeamsClient<
    runtime.Types.Result.GetResult<
      Prisma.$PlayersTeamsPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first PlayersTeams that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayersTeamsFindFirstOrThrowArgs} args - Arguments to find a PlayersTeams
   * @example
   * // Get one PlayersTeams
   * const playersTeams = await prisma.playersTeams.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PlayersTeamsFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, PlayersTeamsFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__PlayersTeamsClient<
    runtime.Types.Result.GetResult<
      Prisma.$PlayersTeamsPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more PlayersTeams that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayersTeamsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PlayersTeams
   * const playersTeams = await prisma.playersTeams.findMany()
   *
   * // Get first 10 PlayersTeams
   * const playersTeams = await prisma.playersTeams.findMany({ take: 10 })
   *
   * // Only select the `teamId`
   * const playersTeamsWithTeamIdOnly = await prisma.playersTeams.findMany({ select: { teamId: true } })
   *
   */
  findMany<T extends PlayersTeamsFindManyArgs>(
    args?: Prisma.SelectSubset<T, PlayersTeamsFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PlayersTeamsPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a PlayersTeams.
   * @param {PlayersTeamsCreateArgs} args - Arguments to create a PlayersTeams.
   * @example
   * // Create one PlayersTeams
   * const PlayersTeams = await prisma.playersTeams.create({
   *   data: {
   *     // ... data to create a PlayersTeams
   *   }
   * })
   *
   */
  create<T extends PlayersTeamsCreateArgs>(
    args: Prisma.SelectSubset<T, PlayersTeamsCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__PlayersTeamsClient<
    runtime.Types.Result.GetResult<
      Prisma.$PlayersTeamsPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many PlayersTeams.
   * @param {PlayersTeamsCreateManyArgs} args - Arguments to create many PlayersTeams.
   * @example
   * // Create many PlayersTeams
   * const playersTeams = await prisma.playersTeams.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends PlayersTeamsCreateManyArgs>(
    args?: Prisma.SelectSubset<T, PlayersTeamsCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many PlayersTeams and returns the data saved in the database.
   * @param {PlayersTeamsCreateManyAndReturnArgs} args - Arguments to create many PlayersTeams.
   * @example
   * // Create many PlayersTeams
   * const playersTeams = await prisma.playersTeams.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many PlayersTeams and only return the `teamId`
   * const playersTeamsWithTeamIdOnly = await prisma.playersTeams.createManyAndReturn({
   *   select: { teamId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends PlayersTeamsCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, PlayersTeamsCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PlayersTeamsPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a PlayersTeams.
   * @param {PlayersTeamsDeleteArgs} args - Arguments to delete one PlayersTeams.
   * @example
   * // Delete one PlayersTeams
   * const PlayersTeams = await prisma.playersTeams.delete({
   *   where: {
   *     // ... filter to delete one PlayersTeams
   *   }
   * })
   *
   */
  delete<T extends PlayersTeamsDeleteArgs>(
    args: Prisma.SelectSubset<T, PlayersTeamsDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__PlayersTeamsClient<
    runtime.Types.Result.GetResult<
      Prisma.$PlayersTeamsPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one PlayersTeams.
   * @param {PlayersTeamsUpdateArgs} args - Arguments to update one PlayersTeams.
   * @example
   * // Update one PlayersTeams
   * const playersTeams = await prisma.playersTeams.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends PlayersTeamsUpdateArgs>(
    args: Prisma.SelectSubset<T, PlayersTeamsUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__PlayersTeamsClient<
    runtime.Types.Result.GetResult<
      Prisma.$PlayersTeamsPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more PlayersTeams.
   * @param {PlayersTeamsDeleteManyArgs} args - Arguments to filter PlayersTeams to delete.
   * @example
   * // Delete a few PlayersTeams
   * const { count } = await prisma.playersTeams.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends PlayersTeamsDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, PlayersTeamsDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more PlayersTeams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayersTeamsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PlayersTeams
   * const playersTeams = await prisma.playersTeams.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends PlayersTeamsUpdateManyArgs>(
    args: Prisma.SelectSubset<T, PlayersTeamsUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more PlayersTeams and returns the data updated in the database.
   * @param {PlayersTeamsUpdateManyAndReturnArgs} args - Arguments to update many PlayersTeams.
   * @example
   * // Update many PlayersTeams
   * const playersTeams = await prisma.playersTeams.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more PlayersTeams and only return the `teamId`
   * const playersTeamsWithTeamIdOnly = await prisma.playersTeams.updateManyAndReturn({
   *   select: { teamId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends PlayersTeamsUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, PlayersTeamsUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PlayersTeamsPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one PlayersTeams.
   * @param {PlayersTeamsUpsertArgs} args - Arguments to update or create a PlayersTeams.
   * @example
   * // Update or create a PlayersTeams
   * const playersTeams = await prisma.playersTeams.upsert({
   *   create: {
   *     // ... data to create a PlayersTeams
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PlayersTeams we want to update
   *   }
   * })
   */
  upsert<T extends PlayersTeamsUpsertArgs>(
    args: Prisma.SelectSubset<T, PlayersTeamsUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__PlayersTeamsClient<
    runtime.Types.Result.GetResult<
      Prisma.$PlayersTeamsPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of PlayersTeams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayersTeamsCountArgs} args - Arguments to filter PlayersTeams to count.
   * @example
   * // Count the number of PlayersTeams
   * const count = await prisma.playersTeams.count({
   *   where: {
   *     // ... the filter for the PlayersTeams we want to count
   *   }
   * })
   **/
  count<T extends PlayersTeamsCountArgs>(
    args?: Prisma.Subset<T, PlayersTeamsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            PlayersTeamsCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a PlayersTeams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayersTeamsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends PlayersTeamsAggregateArgs>(
    args: Prisma.Subset<T, PlayersTeamsAggregateArgs>,
  ): Prisma.PrismaPromise<GetPlayersTeamsAggregateType<T>>;

  /**
   * Group by PlayersTeams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayersTeamsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends PlayersTeamsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PlayersTeamsGroupByArgs["orderBy"] }
      : { orderBy?: PlayersTeamsGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, PlayersTeamsGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetPlayersTeamsGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the PlayersTeams model
   */
  readonly fields: PlayersTeamsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PlayersTeams.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PlayersTeamsClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  team<T extends Prisma.TeamDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TeamDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__TeamClient<
    | runtime.Types.Result.GetResult<
        Prisma.$TeamPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  player<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the PlayersTeams model
 */
export interface PlayersTeamsFieldRefs {
  readonly teamId: Prisma.FieldRef<"PlayersTeams", "Int">;
  readonly playerId: Prisma.FieldRef<"PlayersTeams", "Int">;
}

// Custom InputTypes
/**
 * PlayersTeams findUnique
 */
export type PlayersTeamsFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PlayersTeams
   */
  select?: Prisma.PlayersTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PlayersTeams
   */
  omit?: Prisma.PlayersTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayersTeamsInclude<ExtArgs> | null;
  /**
   * Filter, which PlayersTeams to fetch.
   */
  where: Prisma.PlayersTeamsWhereUniqueInput;
};

/**
 * PlayersTeams findUniqueOrThrow
 */
export type PlayersTeamsFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PlayersTeams
   */
  select?: Prisma.PlayersTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PlayersTeams
   */
  omit?: Prisma.PlayersTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayersTeamsInclude<ExtArgs> | null;
  /**
   * Filter, which PlayersTeams to fetch.
   */
  where: Prisma.PlayersTeamsWhereUniqueInput;
};

/**
 * PlayersTeams findFirst
 */
export type PlayersTeamsFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PlayersTeams
   */
  select?: Prisma.PlayersTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PlayersTeams
   */
  omit?: Prisma.PlayersTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayersTeamsInclude<ExtArgs> | null;
  /**
   * Filter, which PlayersTeams to fetch.
   */
  where?: Prisma.PlayersTeamsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PlayersTeams to fetch.
   */
  orderBy?:
    | Prisma.PlayersTeamsOrderByWithRelationInput
    | Prisma.PlayersTeamsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for PlayersTeams.
   */
  cursor?: Prisma.PlayersTeamsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PlayersTeams from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PlayersTeams.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of PlayersTeams.
   */
  distinct?:
    | Prisma.PlayersTeamsScalarFieldEnum
    | Prisma.PlayersTeamsScalarFieldEnum[];
};

/**
 * PlayersTeams findFirstOrThrow
 */
export type PlayersTeamsFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PlayersTeams
   */
  select?: Prisma.PlayersTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PlayersTeams
   */
  omit?: Prisma.PlayersTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayersTeamsInclude<ExtArgs> | null;
  /**
   * Filter, which PlayersTeams to fetch.
   */
  where?: Prisma.PlayersTeamsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PlayersTeams to fetch.
   */
  orderBy?:
    | Prisma.PlayersTeamsOrderByWithRelationInput
    | Prisma.PlayersTeamsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for PlayersTeams.
   */
  cursor?: Prisma.PlayersTeamsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PlayersTeams from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PlayersTeams.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of PlayersTeams.
   */
  distinct?:
    | Prisma.PlayersTeamsScalarFieldEnum
    | Prisma.PlayersTeamsScalarFieldEnum[];
};

/**
 * PlayersTeams findMany
 */
export type PlayersTeamsFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PlayersTeams
   */
  select?: Prisma.PlayersTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PlayersTeams
   */
  omit?: Prisma.PlayersTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayersTeamsInclude<ExtArgs> | null;
  /**
   * Filter, which PlayersTeams to fetch.
   */
  where?: Prisma.PlayersTeamsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PlayersTeams to fetch.
   */
  orderBy?:
    | Prisma.PlayersTeamsOrderByWithRelationInput
    | Prisma.PlayersTeamsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing PlayersTeams.
   */
  cursor?: Prisma.PlayersTeamsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PlayersTeams from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PlayersTeams.
   */
  skip?: number;
  distinct?:
    | Prisma.PlayersTeamsScalarFieldEnum
    | Prisma.PlayersTeamsScalarFieldEnum[];
};

/**
 * PlayersTeams create
 */
export type PlayersTeamsCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PlayersTeams
   */
  select?: Prisma.PlayersTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PlayersTeams
   */
  omit?: Prisma.PlayersTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayersTeamsInclude<ExtArgs> | null;
  /**
   * The data needed to create a PlayersTeams.
   */
  data: Prisma.XOR<
    Prisma.PlayersTeamsCreateInput,
    Prisma.PlayersTeamsUncheckedCreateInput
  >;
};

/**
 * PlayersTeams createMany
 */
export type PlayersTeamsCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many PlayersTeams.
   */
  data:
    | Prisma.PlayersTeamsCreateManyInput
    | Prisma.PlayersTeamsCreateManyInput[];
};

/**
 * PlayersTeams createManyAndReturn
 */
export type PlayersTeamsCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PlayersTeams
   */
  select?: Prisma.PlayersTeamsSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the PlayersTeams
   */
  omit?: Prisma.PlayersTeamsOmit<ExtArgs> | null;
  /**
   * The data used to create many PlayersTeams.
   */
  data:
    | Prisma.PlayersTeamsCreateManyInput
    | Prisma.PlayersTeamsCreateManyInput[];
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayersTeamsIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * PlayersTeams update
 */
export type PlayersTeamsUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PlayersTeams
   */
  select?: Prisma.PlayersTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PlayersTeams
   */
  omit?: Prisma.PlayersTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayersTeamsInclude<ExtArgs> | null;
  /**
   * The data needed to update a PlayersTeams.
   */
  data: Prisma.XOR<
    Prisma.PlayersTeamsUpdateInput,
    Prisma.PlayersTeamsUncheckedUpdateInput
  >;
  /**
   * Choose, which PlayersTeams to update.
   */
  where: Prisma.PlayersTeamsWhereUniqueInput;
};

/**
 * PlayersTeams updateMany
 */
export type PlayersTeamsUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update PlayersTeams.
   */
  data: Prisma.XOR<
    Prisma.PlayersTeamsUpdateManyMutationInput,
    Prisma.PlayersTeamsUncheckedUpdateManyInput
  >;
  /**
   * Filter which PlayersTeams to update
   */
  where?: Prisma.PlayersTeamsWhereInput;
  /**
   * Limit how many PlayersTeams to update.
   */
  limit?: number;
};

/**
 * PlayersTeams updateManyAndReturn
 */
export type PlayersTeamsUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PlayersTeams
   */
  select?: Prisma.PlayersTeamsSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the PlayersTeams
   */
  omit?: Prisma.PlayersTeamsOmit<ExtArgs> | null;
  /**
   * The data used to update PlayersTeams.
   */
  data: Prisma.XOR<
    Prisma.PlayersTeamsUpdateManyMutationInput,
    Prisma.PlayersTeamsUncheckedUpdateManyInput
  >;
  /**
   * Filter which PlayersTeams to update
   */
  where?: Prisma.PlayersTeamsWhereInput;
  /**
   * Limit how many PlayersTeams to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayersTeamsIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * PlayersTeams upsert
 */
export type PlayersTeamsUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PlayersTeams
   */
  select?: Prisma.PlayersTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PlayersTeams
   */
  omit?: Prisma.PlayersTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayersTeamsInclude<ExtArgs> | null;
  /**
   * The filter to search for the PlayersTeams to update in case it exists.
   */
  where: Prisma.PlayersTeamsWhereUniqueInput;
  /**
   * In case the PlayersTeams found by the `where` argument doesn't exist, create a new PlayersTeams with this data.
   */
  create: Prisma.XOR<
    Prisma.PlayersTeamsCreateInput,
    Prisma.PlayersTeamsUncheckedCreateInput
  >;
  /**
   * In case the PlayersTeams was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.PlayersTeamsUpdateInput,
    Prisma.PlayersTeamsUncheckedUpdateInput
  >;
};

/**
 * PlayersTeams delete
 */
export type PlayersTeamsDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PlayersTeams
   */
  select?: Prisma.PlayersTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PlayersTeams
   */
  omit?: Prisma.PlayersTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayersTeamsInclude<ExtArgs> | null;
  /**
   * Filter which PlayersTeams to delete.
   */
  where: Prisma.PlayersTeamsWhereUniqueInput;
};

/**
 * PlayersTeams deleteMany
 */
export type PlayersTeamsDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which PlayersTeams to delete
   */
  where?: Prisma.PlayersTeamsWhereInput;
  /**
   * Limit how many PlayersTeams to delete.
   */
  limit?: number;
};

/**
 * PlayersTeams without action
 */
export type PlayersTeamsDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PlayersTeams
   */
  select?: Prisma.PlayersTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PlayersTeams
   */
  omit?: Prisma.PlayersTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayersTeamsInclude<ExtArgs> | null;
};
